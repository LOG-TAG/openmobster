#summary HTML5 Sync App

*Related Links:* [DeveloperZone Developer Zone], [GetStarted Get Started]

== Introduction ==

This tutorial covers a HTML5 Sync App written using html and javascript. This app synchronizes its local data with the OpenMobster Cloud Server. 


== Getting and Running this App ==

  * Step 1: [http://openmobster.googlecode.com/svn/samples/webappsync.zip Download] or svn co http://openmobster.googlecode.com/svn/samples/webappsync

  * Step 2: Build the Code: *mvn install*

  * Step 3: Install the App: (*cd app-android*), (*mvn -Phot-deploy install*)

  * Step 4: Run the Cloud Server: (*cd cloud*), (*mvn -PrunCloud integration-test*)


== Bootstrapping the App ==

The App uses the *Android WebView* component and its Javascript bridging capabilities. This is bootstrapped with the Android activity called *SyncWebApp*.

{{{
//Get the activity's WebView instance
        this.webView = (WebView)ViewHelper.findViewById(this, "webview");
        
        //Configure the webview
        WebSettings webSettings = this.webView.getSettings();
        webSettings.setSavePassword(false);
        webSettings.setSaveFormData(false);
        webSettings.setSupportZoom(false);
        
        //Javascript must be enabled to take advantage of HTML5/Javascript based UI layer
        webSettings.setJavaScriptEnabled(true); 
        
        this.webView.setWebChromeClient(new MyWebChromeClient());
        
        //Javascript bridge to the OpenMobster MobileBean service. This provides access to data loaded in via the sync channel
        this.webView.addJavascriptInterface(new MobileBeanBridge(), "mobileBean");
        
        //The application's main content specified in index.html file bundled with the App in the asset folder
        this.webView.loadUrl("file:///android_asset/html/index.html");
}}}

[http://openmobster.googlecode.com/svn/samples/webappsync/app-android/src/main/java/org/openmobster/core/mobileCloud/api/javascript/MobileBeanBridge.java MobileBeanBridge] exposes the OpenMobster Java API to the Javascript layer.

== Displaying the Mobile Beans ==

The list of synchronized Mobile Beans are extracted inside the UI side Javascript layer as follows:

{{{
function loadList()
{
	var beans = mobileBean.readAll(channel); //accesses the MobileBean service via the Javascript bridge
	beans = (""+beans).split(","); //converts the list of MobileBean oids into an array
	var length = beans.length;
	var listArray = new Array(length);
	for(var i=0; i<length; i++)
	{
		var oid = beans[i];
		var title = mobileBean.getValue(channel,oid,"title"); //extracts the value of the field named 'title'
		listArray[i] = {title:title,id:oid};
	}
	
	var list = new joMenu(listArray); //populates the Menu with the information extracted from the MobileBean instances
	return list;
}
}}}

== Saving a Mobile Bean ==

In this CRUD App, the Mobile Bean is saved during the Create and Update operations. The beans are saved via the MobileBean bridge so that the changes can be synchronized with the Cloud.

{{{
saveButton.selectEvent.subscribe(function(){
    	var inputTitle = title.getData();
    	var inputComment = comments.getData();
    	
    	//Validation
    	if(inputTitle == "")
    	{
    		scn.alert("Validation","Title is required");
    		return;
    	}
    	
    	if(inputComment == "")
    	{
    		scn.alert("Validation","Comment is required");
    		return;
    	}
    
    	mobileBean.setValue(channel,oid,"title",inputTitle);
    	mobileBean.setValue(channel,oid,"comment",inputComment);
    	
    	alert("jo-refresh");
     }
    );
}}} 

== Conclusion ==

This is a full blown CRUD App, so reading the code is most likely the best way to understand what is happening. But in a nutshell, the WebView component provides all the plumbing needed to bridge the gap between the Java side of Android, and the Javascript side of the WebKit layer.

A special thanks to [http://joapp.com/ Jo HTML5 Mobile App Framework] for developing a light weight Javascript library.  

*Related Links:* [DeveloperZone Developer Zone], [GetStarted Get Started]