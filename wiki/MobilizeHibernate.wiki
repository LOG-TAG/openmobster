Android CRUD (Create,Read,Update,Delete) App with Hibernate - (Under Construction)

= Introduction =

Goal of this tutorial is to understand the inner workings of architecting an Android CRUD App. This App operates in *offline mode* with *synchronization* and real time *push updates* from the Cloud. Hibernate serves as the ORM layer in the Cloud for storing the originating data in a relational database system.


= Details =

The tutorial will focus on the following features:
  * *Synchronization* of App-side CRUD operations with a Hibernate backend in the Cloud

  * Real time *Push* updates from the Cloud to the App

  * An Android CRUD Workflow App based on the OpenMobster [http://openmobster.googlecode.com/svn/wiki/content/app-developer-guide/html/mobletmvc.html Mobile MVC Framework]

= Development Environment Setup =

  * Java SE, JDK 6

  * Apache Maven 2.2.1

  * Android SDK

  * SVN client to checkout the source code

  * Any IDE for a little help. Not required. I use Eclipse

== Getting the source code ==

  * *Step 1:* Check out the openmobster trunk code, *svn checkout http://openmobster.googlecode.com/svn/trunk/ openmobster-read-only*

  * *Step 2:* Compile and Deploy the core OpenMobster artifacts in your local maven repository, *mvn -DskipTests -Pdeploy-core install*

  * *Step 3:* You are set. The CRUD App is located under *trunk/dev-tools/sampleApps/crud*. It has 3 modules. cloud - for the Cloud Side components, app-android - for the Android App, and moblet - For aggregating all the components and generating a single deployable artifact. For sake of simplicity, we won't worry about the moblet module for now.

== Running the App - for the impatient ;) ==

  * *Step 1:* Run the *Cloud* instance. Go to the *cloud module* and type in: *mvn -PrunCloud integration-test*. This loads a fully functional instance along with the Cloud components for this App.

  * *Step 2:* Make sure the Android emulator and ddms are running. 

  * *Step 3:* Deploy the App by going to the *app-android module* and typing in: *mvn -Phot-deploy install*. This deploys a dev mode CloudManager App (required), and the CRUD App.

  * *Step 4:* Before the CRUD App can run, the device must be securely activated with the Cloud instance. To do this, launch the dev mode CloudManager App and click the 'Activate' option. To speed up development, this provisioning workflow is kept to a minimum. Once the device is activated, you can now launch the CRUD App.

  * *Step 5:* It will do an initial boot sync, and it should be fairly self explanatory from there


== Cloud Components ==

Some Cloud Components of interest before going deeper

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/cloud/src/main/java/org/crud/cloud/crm/TicketChannel.java org.crud.cloud.crm.TicketChannel]: Component that integrates with the *Sync* + *Push* engines.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/cloud/src/main/java/org/crud/cloud/crm/TicketChannel.java org.crud.cloud.crm.Ticket] : _MobileBean_ that travels bi-directionally between the *Cloud* and the *App*.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/cloud/src/main/java/org/crud/cloud/crm/hibernate/TicketDS.java org.crud.cloud.crm.hibernate.TicketDS] : _DataSource_ component based on the Hibernate framework. It provides storage services for persisting _Ticket_ instances into a relational database.

== Android App Components ==

== Dissecting the *C*reate usecase ==

=== Cloud ===

=== App ===

== Dissecting the *R*ead usecase ==

=== Cloud ===

=== App ===

== Dissecting the *U*pdate usecase ==

=== Cloud ===

=== App ===

== Dissecting the *D*elete usecase ==

=== Cloud ===

=== App ===

== Dissecting the *Push* usecase ==

=== Cloud ===

=== App ===