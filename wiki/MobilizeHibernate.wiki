#labels Hibernate,Sync,Push
Android CRUD (Create,Read,Update,Delete) App with Hibernate - (Under Construction)

= Introduction =

Goal of this tutorial is to understand the inner workings of architecting an Android CRUD App. This App operates in *offline mode* with *synchronization* and real time *push updates* from the Cloud. Hibernate serves as the ORM layer in the Cloud for storing the originating data in a relational database system.


= Details =

The tutorial will focus on the following features:
  * *Synchronization* of App-side CRUD operations with a Hibernate backend in the Cloud

  * Real time *Push* updates from the Cloud to the App

  * An Android CRUD Workflow App based on the OpenMobster [http://openmobster.googlecode.com/svn/wiki/content/app-developer-guide/html/mobletmvc.html Mobile MVC Framework]

= Development Environment Setup =

  * Java SE, JDK 6

  * Apache Maven 2.2.1

  * Android SDK

  * SVN client to checkout the source code

  * Any IDE for a little help. Not required. I use Eclipse

== Getting the source code ==

  * *Step 1:* Check out the openmobster trunk code, *svn checkout http://openmobster.googlecode.com/svn/trunk/ openmobster-read-only*

  * *Step 2:* Compile and Deploy the core OpenMobster artifacts in your local maven repository, *mvn -DskipTests -Pdeploy-core install*

  * *Step 3:* You are set. The CRUD App is located under *trunk/dev-tools/sampleApps/crud*. It has 3 modules. cloud - for the Cloud Side components, app-android - for the Android App, and moblet - For aggregating all the components and generating a single deployable artifact. For sake of simplicity, we won't worry about the moblet module for now.

== Running the App - for the impatient ;) ==

  * *Step 1:* Run the *Cloud* instance. Go to the *cloud module* and type in: *mvn -PrunCloud integration-test*. This loads a fully functional instance along with the Cloud components for this App.

  * *Step 2:* Make sure the Android emulator and ddms are running. 

  * *Step 3:* Deploy the App by going to the *app-android module* and typing in: *mvn -Phot-deploy install*. This deploys a dev mode CloudManager App (required), and the CRUD App.

  * *Step 4:* Before the CRUD App can run, the device must be securely activated with the Cloud instance. To do this, launch the dev mode CloudManager App and click the 'Activate' option. To speed up development, this provisioning workflow is kept to a minimum. Once the device is activated, you can now launch the CRUD App.

  * *Step 5:* It will do an initial boot sync, and it should be fairly self explanatory from there


== Cloud Components ==

Overview of some *Cloud* components of interest before going deeper

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/cloud/src/main/java/org/crud/cloud/crm/TicketChannel.java org.crud.cloud.crm.TicketChannel]: Component that integrates with the *Sync* + *Push* engines.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/cloud/src/main/java/org/crud/cloud/crm/Ticket.java org.crud.cloud.crm.Ticket] : _MobileBean_ that travels bi-directionally between the *Cloud* and the *App*. Literally the life blood of the system.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/cloud/src/main/java/org/crud/cloud/crm/hibernate/TicketDS.java org.crud.cloud.crm.hibernate.TicketDS] : _DataSource_ component based on the Hibernate framework. It provides storage services for persisting _Ticket_ instances into a relational database.

== Android App Components ==

Overview of some *App* components of interest before going deeper

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/screen/HomeScreen.java org.crud.android.screen.HomeScreen]: ViewController in charge of the 'Home' screen of the App. The screen displays locally synchronized tickets in a ListView.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/screen/NewTicketScreen.java org.crud.android.screen.NewTicketScreen]: ViewController in charge of the ticket creation screen. It presents a simple Form to collecting the information.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/screen/UpdateTicketScreen.java org.crud.android.screen.UpdateTicketScreen]: ViewController in charge of the ticket update usecase. It presents a pre-populated Form.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/command/CreateTicket.java org.crud.android.command.CreateTicket]: BusinessController in charge of create the new ticket locally. This is then automagically synchronized with the Cloud.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/command/UpdateTicket.java org.crud.android.command.UpdateTicket]: BusinessController in charge of updating the said ticket instance locally. This is then automagically synchronized with the Cloud.

  * [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/command/DeleteTicket.java org.crud.android.command.DeleteTicket]: BusinessController in charge of deleting a ticket instance locally. This change is then synchronized with the Cloud.
 

== Dissecting the (C)reate usecase ==

The create usecase consists of presenting the user with a simple form for inputting the ticket details. The form consists of two *EditTexts* and two *Spinners*. The options for the spinners are loaded asynchronously from the Cloud. When the user is finished, they can *Save* to create a new ticket instance locally or *Cancel* the process, in which case nothing changes in the system. Once the ticket instance is modified locally the on-device Cloud system auto detects the change and schedules an appropriate sync to reflect this change back to the Cloud.

=== App ===

==== [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/screen/NewTicketScreen.java org.crud.android.screen.NewTicketScreen] ====

  * *Save: * The save method on this ViewController populates the newly created MobileBean instance of the channel. It reads the data from the input controls. Once the instance is populated, it is sent over to the [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/command/NewTicket.java org.crud.android.command.NewTicket] business controller for processing.
    As you can see from the code, this business controller is a Command object registered under the '/create/ticket' unique URI.
    {{{
  	private void save()
	{
		final Activity currentActivity = (Activity)Registry.getActiveInstance().
		getContext();
		
		//Creates a new ticket instance on the device. Once 'saved', it will be seamlessly synchronized with the Cloud
		MobileBean ticket = MobileBean.newInstance("crm_ticket_channel");
		
		EditText title = (EditText)ViewHelper.findViewById(currentActivity, "title");
		ticket.setValue("title", title.getText().toString());
		
		EditText comments = (EditText)ViewHelper.findViewById(currentActivity, "comments");
		ticket.setValue("comment", comments.getText().toString());
		
		Spinner customer = (Spinner)ViewHelper.findViewById(currentActivity, "customer");
		ticket.setValue("customer", ((TextView)customer.getSelectedView()).getText().toString());
		
		Spinner specialist = (Spinner)ViewHelper.findViewById(currentActivity, "specialist");
		ticket.setValue("specialist", ((TextView)specialist.getSelectedView()).getText().toString());
		
		//execute the create ticket usecase. It creates a new ticket in the on-device db and
		//its synchronized automagically with the Cloud
		CommandContext commandContext = new CommandContext();
		commandContext.setTarget("/create/ticket");
		commandContext.setAttribute("ticket", ticket);
		Services.getInstance().getCommandService().execute(commandContext);
	}
    }}} 

==== [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/command/CreateTicket.java org.crud.android.command.CreateTicket] ====

*CreateTicket* is a business controller for saving the new ticket instance. It is an instance of *org.openmobster.core.mobileCloud.api.ui.framework.command.AsyncCommand* so that it executes asynchronously without 
freezing up the UI. This controller performs all its function by only accessing local resources. The ticket instance is created locally on the device. The on device OpenMobster Cloud system will take care of synchronizing this
with the Cloud.

  {{{
	public void doAction(CommandContext commandContext) 
	{
		try
		{
			//Saves the MobileBean instance locallyï¿½This is it for the developer. Nothing more to do
			MobileBean ticketToAdd = (MobileBean)commandContext.getAttribute("ticket");
			ticketToAdd.save();
		}
		catch(Exception e)
		{
			AppException appe = new AppException();
			appe.setMessage(e.getMessage());
			ErrorHandler.getInstance().handle(appe);
			
			throw appe;
		}
	}	
	
	public void doViewAfter(CommandContext commandContext)
	{
		//Navigate back to the home screen
		NavigationContext.getInstance().back();
	}
    }}}

=== Cloud ===

==== [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/cloud/src/main/java/org/crud/cloud/crm/TicketChannel.java org.crud.cloud.crm.TicketChannel] ====

  * The TicketChannel provides a simple CRUD interface for the core sync engine. In the case of the 'Create' usecase, it will invoke the _public String create(MobileBean mobileBean)_ method to make sure that the 
    MobileBean that was added on the device side is also added to the Cloud.

    {{{
     /**
      * Adds a new ticket created on the device to the backend db
      */
      public String create(MobileBean mobileBean)
      {
	  Ticket local = (Ticket)mobileBean;
	  return this.ds.create(local);
      }
    }}}

== Dissecting the (R)ead usecase ==

The read usecase consists of presenting the user with a ListView of locally synchronized ticket beans. When the user selects one, it shows more details about the ticket in an AlertDialog. From a Cloud standpoint, this is a very
simple usecase. When the CRUD app is started, an initial boot sync is performed with the Cloud. As the user uses the App, the on device Cloud system continues to synchronize the other ticket beans in the background. There is no
user intervention needed

=== App ===

==== [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/app-android/src/main/java/org/crud/android/screen/HomeScreen.java org.crud.android.screen.HomeScreen] ====

  * This ViewController displays the 'Home' screen of the App. 
    {{{
     private void showTickets(Activity app)
	{
		//Read all the ticket instances synchronized with the Cloud
		MobileBean[] tickets = MobileBean.readAll("crm_ticket_channel");
		if(tickets != null && tickets.length > 0)
		{
			//Populate the List View
			ListView view = (ListView)ViewHelper.findViewById(app, "list");
			
			//Prepare the data for the adapter. Data is read from the ticket bean instances
			ArrayList<HashMap<String, String>> mylist = new ArrayList<HashMap<String, String>>();
			for(MobileBean local:tickets)
			{
				HashMap<String, String> map = new HashMap<String, String>();
				
				String customer = local.getValue("customer");
				String title = local.getValue("title");
				
				if(customer.length() > 25)
				{
					customer = customer.substring(0, 22)+"...";
				}
				
				if(title.length() > 25)
				{
					title = title.substring(0, 22)+"...";
				}
				
				map.put("customer", customer);
				map.put("title", title);
				mylist.add(map);
			}
			
			SimpleAdapter ticketAdapter = new SimpleAdapter(app, mylist, ViewHelper.findLayoutId(app, "ticket_row"),
		            new String[] {"customer", "title"}, new int[] {ViewHelper.findViewId(app, "customer"), ViewHelper.findViewId(app, "title")});
		    view.setAdapter(ticketAdapter);
		    
		    //List Listener...used to respond to selecting a ticket instance
			OnItemClickListener clickListener = new ClickListener(tickets);
			view.setOnItemClickListener(clickListener);
		}	
	}
    }}}


=== Cloud ===

==== [http://openmobster.googlecode.com/svn/trunk/dev-tools/sampleApps/crud/cloud/src/main/java/org/crud/cloud/crm/TicketChannel.java org.crud.cloud.crm.TicketChannel] ====

  * The TicketChannel provides a simple CRUD interface for the core sync engine. In the case of the 'Read' usecase, it invokes a few read related methods to get the proper data from the backend.

    {{{
       /**
	 * 'bootup' provides just enough number of ticket instances to make sure the mobile app is functional
	 * 
	 * This saves the user to having to wait on a long sync cycle before app can be used. How many instances are provided
	 * at channel boot time is completely at the discretion of the App requirement
	 */
	public List<? extends MobileBean> bootup()
	{
		List<Ticket> bootup = new ArrayList<Ticket>();
		
		List<Ticket> all = this.ds.readAll();
		if(all != null)
		{
			for(int i=0; i<5; i++)
			{
				bootup.add(all.get(i));
			}
		}
		
		return bootup; 
	}
	
	/**
	 * Reads all the instances stored in the db
	 */
	public List<? extends MobileBean> readAll()
	{
		return this.ds.readAll();
	}

	/**
	 * Reads a specific ticket instance based on the unique 'ticketId'
	 */
	public MobileBean read(String ticketId)
	{
		return this.ds.readByTicketId(ticketId);
	}
    }}}

== Dissecting the *Push* usecase ==

=== Cloud ===

The TicketChannel provides a scanning interface to the *Push* engine. The engine can scan for any channel updates that need to be pushed in real time to the Apps on the device. This App provides new ticket beans that have been
created on the Cloud. 

{{{
  /**
	 * 'Pushes' any new instances that are created in the db down to the device in real time
	 */
	public String[] scanForNew(Device device, Date lastScanTimestamp)
	{
		return this.pushListener.checkUpdates();
	}
}}}

For demonstration purposes, the trigger to generate new beans in the backend is actually present in the App under the "Demo Push" option of the "Home Screen". In an actual setting, new beans would be created via other external methods like enterprise web applications, CRM Workflows etc.