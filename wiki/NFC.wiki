#summary Near Field Communication

*Related:* [AndroidArea Android Area], [BeginnerZone Beginner Area]

----

==== Introduction ====
Near Field Communication (NFC) is a set of short-range wireless technologies, typically requiring a distance of 4cm or less. NFC operates at 13.56mhz, and at rates ranging from 106 kbit/s to 848 kbit/s. NFC communication always involves an initiator and a target. The initiator actively generates an RF field that can power a passive target. This enables NFC targets to take very simple form factors such as tags, stickers or cards that do not require power. NFC peer-to-peer communication is also possible, where both devices are powered.

==== Payload ====
The NFC Payload conforms to the standard NFC Forum data structure. On Android, this is represented by a NdefMessage type. NdefMessage consists of zero or more NdefRecord objects. Each NDEF record has a type such as text, URL, smart poster, or any MIME data. The type of the first NDEF record in the NDEF message is used to dispatch a tag to an activity on Android.

===== Parsing an NdefRecord =====
{{{
public static TextRecord parse(NdefRecord record)
{
	//Validation
	Preconditions.checkArgument(record.getTnf() == NdefRecord.TNF_WELL_KNOWN);
        Preconditions.checkArgument(Arrays.equals(record.getType(), NdefRecord.RTD_TEXT));
        try
        {
        	byte[] payload = record.getPayload();
        	
        	/*
             * payload[0] contains the "Status Byte Encodings" field, per the
             * NFC Forum "Text Record Type Definition" section 3.2.1.
             *
             * bit7 is the Text Encoding Field.
             *
             * if (Bit_7 == 0): The text is encoded in UTF-8 if (Bit_7 == 1):
             * The text is encoded in UTF16
             *
             * Bit_6 is reserved for future use and must be set to zero.
             *
             * Bits 5 to 0 are the length of the IANA language code.
             */

        	 //Get the Text Encoding
        	String textEncoding = ((payload[0] & 0200) == 0) ? "UTF-8" : "UTF-16";
        	
        	//Get the Language Code
        	int languageCodeLength = payload[0] & 0077;
        	String languageCode = new String(payload, 1, languageCodeLength, "US-ASCII");
        	
        	//Get the Text
        	String text = new String(payload, languageCodeLength + 1, payload.length - languageCodeLength - 1, textEncoding);
        	
            return new TextRecord(text, languageCode);
        }
        catch(Exception e)
        {
        	throw new RuntimeException("Record Parsing Failure!!");
        }
}
}}}

===== Parsing NdefMessage =====
{{{
public static List<TextRecord> parse(NdefMessage message)
{
		List<TextRecord> textRecords = new ArrayList<TextRecord>();
		
		//Get the Records inside the message
		NdefRecord[] records = message.getRecords();
		
		//Iterate through and generate a list of text records
		if(records != null && records.length>0)
		{
			for(NdefRecord local: records)
			{
				TextRecord textRecord = TextRecord.parse(local);
				textRecords.add(textRecord);
			}
		}
		
		return textRecords;
}
}}}
 
----
==== Simulating NFC Tag Discovery ==== 
NFC is supported from API level 9 and above. However, it is not supported by the emulator. To test NFC you need an NFC device. This is not very convenient. Hence, for this tutorial we will simulate the *NFC Tag Discovery* process. The NFC Tag data is provided by a *MockData* class. The discovery event is generated by an activity.

===== MockData =====
{{{
public class MockData 
{
	/**
     * A plain text tag in english.
     */
    public static final byte[] ENGLISH_PLAIN_TEXT_TAG =
        new byte[] {(byte) 0xd1, (byte) 0x01, (byte) 0x1c, (byte) 0x54, (byte) 0x02, (byte) 0x65,
            (byte) 0x6e, (byte) 0x53, (byte) 0x6f, (byte) 0x6d, (byte) 0x65, (byte) 0x20,
            (byte) 0x72, (byte) 0x61, (byte) 0x6e, (byte) 0x64, (byte) 0x6f, (byte) 0x6d,
            (byte) 0x20, (byte) 0x65, (byte) 0x6e, (byte) 0x67, (byte) 0x6c, (byte) 0x69,
            (byte) 0x73, (byte) 0x68, (byte) 0x20, (byte) 0x74, (byte) 0x65, (byte) 0x78,
            (byte) 0x74, (byte) 0x2e};
}
}}}

===== Show Tags in a List =====
{{{
@Override
public void onCreate(Bundle savedState) 
{
        super.onCreate(savedState);
        
        //Create the ArrayAdapter for the List Activity
        final ArrayAdapter<Tag> adapter = new ArrayAdapter<Tag>(
            this, android.R.layout.simple_list_item_1, android.R.id.text1);
        
        //add entries
        adapter.add(
            new Tag("Broadcast NFC Text Tag", MockData.ENGLISH_PLAIN_TEXT_TAG));
        
        setListAdapter(adapter);
        mAdapter = adapter;
}
}}}

===== Generate the Tag Discovery Event =====
{{{
@Override
public void onListItemClick(ListView l, View v, int position, long id) 
{
        final Tag description = mAdapter.getItem(position);
        
        //Create a Tag Discovery intent for broadcast
        final Intent intent = new Intent(NfcAdapter.ACTION_TAG_DISCOVERED);
        intent.putExtra(NfcAdapter.EXTRA_NDEF_MESSAGES, description.messages);
        
        //Send the intent
        startActivity(intent);
}
}}}
----

==== Processing the NFC Tag event ====

An activity receives the tag discovery event, parses the payload, and displays the data from the tag.
{{{
private void resolveIntent(Intent intent)
{
		//Get the Action
		String action = intent.getAction();
		
		if(action.equals(NfcAdapter.ACTION_TAG_DISCOVERED))
		{
			//Get the NFC Tag Data from the intent
			Parcelable[] rawMsgs = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
            NdefMessage[] msgs;
            
            if (rawMsgs != null) 
            {
                msgs = new NdefMessage[rawMsgs.length];
                for (int i = 0; i < rawMsgs.length; i++) 
                {
                    msgs[i] = (NdefMessage) rawMsgs[i];
                }
            } 
            else 
            {
                // Unknown tag type
                byte[] empty = new byte[] {};
                NdefRecord record = new NdefRecord(NdefRecord.TNF_UNKNOWN, empty, empty, empty);
                NdefMessage msg = new NdefMessage(new NdefRecord[] {record});
                msgs = new NdefMessage[] {msg};
            }
            
            //Display the received messages
            List<TextRecord> records = NdefMessageParser.parse(msgs[0]);
            this.adapter.clear();
            
            for(TextRecord local:records)
            {
            	String text = local.getText();
            	this.adapter.add(text);
            }
		}
		else
		{
			Log.e("NFC/MainActivity", "Unknown intent " + intent);
            finish();
            return;
		}
}
}}}

===== Full Activity Source Code =====
{{{
public class MainActivity extends ListActivity
{
	private ArrayAdapter<String> adapter;
	
	public MainActivity()
	{
		
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		
		//Create the ArrayAdapter for the List Activity
        this.adapter = new ArrayAdapter<String>(
         this, android.R.layout.simple_list_item_1, android.R.id.text1);
        
        setListAdapter(adapter);
        
        //Process the intent that started this activity. It should be a Tag Discovery related intent
        this.resolveIntent(this.getIntent());
	}
	
	@Override
    public void onNewIntent(Intent intent) 
	{
          setIntent(intent);
          resolveIntent(intent);
        }
	
	private void resolveIntent(Intent intent)
	{
		//Get the Action
		String action = intent.getAction();
		
	if(action.equals(NfcAdapter.ACTION_TAG_DISCOVERED))
	{
			//Get the NFC Tag Data from the intent
			Parcelable[] rawMsgs = intent.getParcelableArrayExtra(NfcAdapter.EXTRA_NDEF_MESSAGES);
            NdefMessage[] msgs;
            
            if (rawMsgs != null) 
            {
                msgs = new NdefMessage[rawMsgs.length];
                for (int i = 0; i < rawMsgs.length; i++) 
                {
                    msgs[i] = (NdefMessage) rawMsgs[i];
                }
            } 
            else 
            {
                // Unknown tag type
                byte[] empty = new byte[] {};
                NdefRecord record = new NdefRecord(NdefRecord.TNF_UNKNOWN, empty, empty, empty);
                NdefMessage msg = new NdefMessage(new NdefRecord[] {record});
                msgs = new NdefMessage[] {msg};
            }
            
            //Display the received messages
            List<TextRecord> records = NdefMessageParser.parse(msgs[0]);
            this.adapter.clear();
            
            for(TextRecord local:records)
            {
            	String text = local.getText();
            	this.adapter.add(text);
            }
		}
	else
	{
	      Log.e("NFC/MainActivity", "Unknown intent " + intent);
              finish();
              return;
	}
    }
}
}}}

---- 

==== Download this tutorial ====

  * [http://openmobster.googlecode.com/samples/nfcsample.zip Download]

  {{{
      cd app-android
  }}}

  {{{
     mvn -Papp-hot-deploy install
  }}}

----

*Related:* [AndroidArea Android Area], [BeginnerZone Beginner Area]