#summary SQLite CRUD App

==== Introduction ====
This tutorial covers creating an App that uses the SQLite database system for its local storage needs

==== Step 1: Initialize the database ====
At the start of the App, a database called _crm.db_ is initialized. Once the database is created if it does not already exist, a _tickets_ table is created. For using the App, if the table is empty, some mock data is inserted into the table

===== initialize =====
{{{
public static void initialize(Context context)
	{
		//Open a SQLite Database
		db = context.openOrCreateDatabase("crm.db", SQLiteDatabase.CREATE_IF_NECESSARY, null);
		
		//Check for the 'tickets' table and create it if it does not exist
		createTable(db, "tickets");
		
		//Load mock data into 'tickets' table if it is empty
		if(isTableEmpty("tickets"))
		{
			for(int i=0; i<3; i++)
			{
				Ticket local = new Ticket();
				switch(i)
				{
					case 0:
						local.setTitle("Search is down");
						local.setCustomer("Google");
						local.setSpecialist("Larry Page");
						local.setComments("Seach Index Error!!!");
					break;
					
					case 1:
						local.setTitle("Windows is down");
						local.setCustomer("Microsoft");
						local.setSpecialist("Steve Ballmer");
						local.setComments("Blue Screen of Death!!!");
					break;
					
					case 2:
						local.setTitle("MobileMe is down");
						local.setCustomer("Apple");
						local.setSpecialist("Steve Jobs");
						local.setComments("Cannot synchronize data!!!");
					break;
					
					default:
					break;
				}
				insert(local);
			}
		}
	}
}}}

===== createTable =====
{{{
private static void createTable(SQLiteDatabase database, String tableName)
	{
		try
		{
			//begin the transaction
			database.beginTransaction();
			
			// Create a table
			String tableSql = "CREATE TABLE IF NOT EXISTS " + tableName + " ("
					+ "id INTEGER PRIMARY KEY AUTOINCREMENT," + "title TEXT," + "customer TEXT," + "specialist TEXT," +"comments TEXT"
					+ ");";
			database.execSQL(tableSql);
			
			//this makes sure transaction is committed
			database.setTransactionSuccessful();
		} 
		finally
		{
			database.endTransaction();
		}
	}
}}}

===== isTableEmpty =====
{{{
private static boolean isTableEmpty(String table)
	{
		Cursor cursor = null;
		try
		{
			cursor = db.rawQuery("SELECT count(*) FROM "+table, null);
			
			int countIndex = cursor.getColumnIndex("count(*)");
			cursor.moveToFirst();
			int rowCount = cursor.getInt(countIndex);
			if(rowCount > 0)
			{
				return false;
			}
			
			return true;
		}
		finally
		{
			if(cursor != null)
			{
				cursor.close();
			}
		}
	}
}}}

----

==== Step 2: Read the database ====

==== Step 3: Insert into the database ====

==== Step 4: Delete from the database ====

=== Download this Tutorial ===