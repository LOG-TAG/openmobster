#summary Tutorial: Android Location Service

*Related:* [AndroidArea Android Area], [BeginnerZone Beginner Area]

----

=== Introduction ====

Location Aware programming adds a new dimension to mobile programming. Location hardware such as GPS unit, etc are pretty standard on the devices. Taking advantage of this helps create much more feature rich and robust mobile apps. In this tutorial we will learn how to get raw location data from the hardware, and then translate it into something meaningful like an address to a place.

=== Download this tutorial ===

[http://openmobster.googlecode.com/svn/samples/locationapp.zip Download] or svn co http://openmobster.googlecode.com/svn/samples/locationapp

Go to the App's Directory
{{{
cd app-android
}}}

Compile and Deploy into the Emulator or Connected Device
{{{
mvn -Papp-hot-deploy install
}}}


=== Finding Your Location ===

Here are step by step instructions on finding the current location.

==== Step 1: AndroidManifest.xml, get permission
{{{
     <uses-permission android:name="android.permission.ACCESS_FINE_LOCATION" />
}}}

==== Step 2: Get an instance of the LocationManager ====
{{{
// Acquire a reference to the system Location Manager
LocationManager locationManager = (LocationManager)context.
getSystemService(Context.LOCATION_SERVICE);
}}}

==== Step 3: Register your LocationListener to receive updates ====
{{{
//This component receives callback with the results
			LocationListener locationListener = new LocationListenerImpl();
			
// Register the listener with the Location Manager to receive location updates
			locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
			
// Register the listener with the Location Manager to receive location updates
			locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);
}}}

==== Step 4: Create a listening window and then cleanup ====
{{{
//Stay open for 10 seconds...get the fix in 10 seconds
			try{Thread.sleep(10000);}catch(Exception e){};
			
			locationManager.removeUpdates(locationListener);
}}}

==== LocationListener ====
{{{
/**
	 * LocationListener that receives the results of reading the location from the hardware
	 *
	 * @author openmobster@gmail.com
	 */
	private class LocationListenerImpl implements LocationListener
	{
		private LocationListenerImpl()
		{
		}

		@Override
		public void onLocationChanged(Location location) 
		{	
			//Set this location
			LocationFinder.this.location = location;
		}

		@Override
		public void onProviderDisabled(String provider) 
		{	
		}

		@Override
		public void onProviderEnabled(String provider) 
		{	
		}

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) 
		{	
		}
	}
}}}

==== Full Source Code ====
{{{
package org.openmobster.app;

import android.content.Context;
import android.location.Location;
import android.location.LocationListener;
import android.location.LocationManager;
import android.os.Bundle;
import android.os.Handler;
import android.os.Looper;

/**
 * This class fixes the current Location coordinates of the device
 * 
 * @author openmobster@gmail.com
 */
public class LocationFinder 
{
	private Location location;
	
	
	/**
	 * Start the process of asking the hardware for location coordinates
	 */
	public void startFind(Context context)
	{
		LocationLooper looper = new LocationLooper();
		looper.start();
		
		while(!looper.isReady());
		
		looper.handler.post(new LocationBootstrapper(context));
	}
	
	/**
	 * End the process of getting the location and cleanup
	 * 
	 * @return the location obtained from the hardware
	 */
	public Location endFind()
	{
		int counter = 6;
		while(this.location == null)
		{
			try{Thread.sleep(5000);}catch(Exception e){}
			
			if(counter-- == 0)
			{
				break;
			}
		}
		
		return this.location;
	}
	
	/**
	 * Used to run location related code on the main thread
	 *
	 * @author openmobster@gmail.com
	 */
	private class LocationLooper extends Thread
	{
		private Handler handler;
		
		private LocationLooper()
		{
			
		}
		
		public void run()
		{
			Looper.prepare();
			
			this.handler = new Handler();
			
			Looper.loop();
		}
		
		public boolean isReady()
		{
			return this.handler != null;
		}
	}
	
	/**
	 * Bootstraps the Location fetching process
	 *
	 * @author openmobster@gmail.com
	 */
	private class LocationBootstrapper implements Runnable
	{	
		private Context context;
		
		private LocationBootstrapper(Context context)
		{
			this.context = context;
		}
		
		public void run()
		{
			// Acquire a reference to the system Location Manager
			LocationManager locationManager = (LocationManager)context.
			getSystemService(Context.LOCATION_SERVICE);
			
			//This component receives callback with the results
			LocationListener locationListener = new LocationListenerImpl();
			
			// Register the listener with the Location Manager to receive location updates
			locationManager.requestLocationUpdates(LocationManager.NETWORK_PROVIDER, 0, 0, locationListener);
			
			// Register the listener with the Location Manager to receive location updates
			locationManager.requestLocationUpdates(LocationManager.GPS_PROVIDER, 0, 0, locationListener);
			
			//Stay open for 10 seconds...get the fix in 10 seconds
			try{Thread.sleep(10000);}catch(Exception e){};
			
			locationManager.removeUpdates(locationListener);
		}
	}
	
	/**
	 * LocationListener that receives the results of reading the location from the hardware
	 *
	 * @author openmobster@gmail.com
	 */
	private class LocationListenerImpl implements LocationListener
	{
		private LocationListenerImpl()
		{
		}

		@Override
		public void onLocationChanged(Location location) 
		{	
			//Set this location
			LocationFinder.this.location = location;
		}

		@Override
		public void onProviderDisabled(String provider) 
		{	
		}

		@Override
		public void onProviderEnabled(String provider) 
		{	
		}

		@Override
		public void onStatusChanged(String provider, int status, Bundle extras) 
		{	
		}
	}
}
}}}

=== Finding Your Address ===

You can use your raw latitude and longitude data and convert it into useful things like addresses, names of places, etc. This process is called Geocoding. On Android, you do not need any special permissions to use the Geocoding hardware. On the emulator you must use an AVD with API level 6 with Google APIs. I have observed the Geocoder is missing in API levels 7, and 8.

Here are step by step instructions to finding your address from raw location data

==== Step 1: Get the Geocoder service ====

==== Step 2: Find the Address or a list of addresses ====

==== Step 3: Processing the Addresses ====

==== Full Source Code ====

----

*Related:* [AndroidArea Android Area], [BeginnerZone Beginner Area]