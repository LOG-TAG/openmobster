#summary Inter-App Communication

*Related:* [AndroidArea Android Area]

----

=== Introduction ===

This tutorial covers the mechanism for performing Inter-App Communication. It comes with two apps. A client app that makes the request and a service app that processes the request and sends a response back.


==== Step 1: Create the Service ====
You must create a service that will be bound to before invocation. The service must return an *IBinder* object during the *onBind* invocation
{{{
public class RemoteService extends Service
{
	private Messenger messenger; //receives remote invocations
	
	@Override
	public IBinder onBind(Intent intent) 
	{
		if(this.messenger == null)
		{
			synchronized(RemoteService.class)
			{
				if(this.messenger == null)
				{
					this.messenger = new Messenger(new IncomingHandler());
				}
			}
		}
		//Return the proper IBinder instance
		return this.messenger.getBinder();
	}
}}} 

The service uses a *Messenger* and sends it binder back. A *Messenger* is the component that makes inter process communication possible.

==== Step 2: Implement the *Handler* ====
*Handler* is the component that is registered with the *Messenger*. This component is the one that receives the remote invocation.
{{{
private class IncomingHandler extends Handler
	{
		@Override
        public void handleMessage(Message msg) 
		{
			System.out.println("*****************************************");
			System.out.println("Remote Service successfully invoked!!!!!!");
			System.out.println("*****************************************");
			
			int what = msg.what;
			
			Toast.makeText(RemoteService.this.getApplicationContext(), "Remote Service invoked-("+what+")", Toast.LENGTH_LONG).show();
			
			//Setup the reply message
			Message message = Message.obtain(null, 2, 0, 0);
			try
			{
				//make the RPC invocation
				Messenger replyTo = msg.replyTo;
				replyTo.send(message);
			}
			catch(RemoteException rme)
			{
				//Show an Error Message
				Toast.makeText(RemoteService.this, "Invocation Failed!!", Toast.LENGTH_LONG).show();
			}
        }
	}
}}}

This *Handler* processes the incoming request and sends a reply based on the *replyTo* Messenger that comes in with the incoming request.

==== Full Src for the Service implementation ====
{{{
public class RemoteService extends Service
{
	private Messenger messenger; //receives remote invocations
	
	@Override
	public IBinder onBind(Intent intent) 
	{
		if(this.messenger == null)
		{
			synchronized(RemoteService.class)
			{
				if(this.messenger == null)
				{
					this.messenger = new Messenger(new IncomingHandler());
				}
			}
		}
		//Return the proper IBinder instance
		return this.messenger.getBinder();
	}
	
	private class IncomingHandler extends Handler
	{
		@Override
        public void handleMessage(Message msg) 
		{
			System.out.println("*****************************************");
			System.out.println("Remote Service successfully invoked!!!!!!");
			System.out.println("*****************************************");
			
			int what = msg.what;
			
			Toast.makeText(RemoteService.this.getApplicationContext(), "Remote Service invoked-("+what+")", Toast.LENGTH_LONG).show();
			
			//Setup the reply message
			Message message = Message.obtain(null, 2, 0, 0);
			try
			{
				//make the RPC invocation
				Messenger replyTo = msg.replyTo;
				replyTo.send(message);
			}
			catch(RemoteException rme)
			{
				//Show an Error Message
				Toast.makeText(RemoteService.this, "Invocation Failed!!", Toast.LENGTH_LONG).show();
			}
        }
	}
}
}}}

----

==== Step 3: Create a ServiceConnection object ====
When a client binds to a service, this call is asynchronous. The system uses a callback mechanism to provide the client with the proper binder to make an invocation. A *ServiceConnection* is this callback object. You can easily implement it as follows
{{{
private class RemoteServiceConnection implements ServiceConnection
	{
		@Override
		public void onServiceConnected(ComponentName component, IBinder binder) 
		{	
			MainActivity.this.messenger = new Messenger(binder);
			
			MainActivity.this.isBound = true;
		}

		@Override
		public void onServiceDisconnected(ComponentName component) 
		{	
			MainActivity.this.messenger = null;
			
			MainActivity.this.isBound = false;
		}
	}
}}}
In this implementation, the client sets up its *Messenger* object using the supplied *IBinder* instance

==== Step 4: Bind to the remote service ====
{{{
@Override
	protected void onStart()
	{
		super.onStart();
		
		//Bind to the remote service
		Intent intent = new Intent();
		intent.setClassName("org.openmobster.remote.service.android.app", "org.openmobster.app.RemoteService");
		
		this.bindService(intent, this.connection, Context.BIND_AUTO_CREATE);
	}
}}}
You create an intent. In this case, it points to the App being connected to, and the class name of the component being invoked. Once, the intent is created you can bind using the *bind* method. You supply a *ServiceConnection* object as the one that will receive callbacks upon successful binding

==== Step 5: Make the remote invocation ====
{{{
//Setup the message for invocation
Message message = Message.obtain(null, 1, 0, 0);
try
{
  //Set the ReplyTo Messenger for processing the invocation response
  message.replyTo = MainActivity.this.replyTo;
							
  //Make the invocation
							MainActivity.this.messenger.send(message);
}
catch(RemoteException rme)
{
  //Show an Error Message
  Toast.makeText(MainActivity.this, "Invocation Failed!!",   Toast.LENGTH_LONG).show();
}
}}}
You first create a *Message* object using *Message.obtain*, you set the *replyTo* property to be your local *Messenger*, and then make the invocation using the *send* method

==== Full Src for the Client Code ====
{{{
public class MainActivity extends Activity
{
	private Messenger messenger = null; //used to make an RPC invocation
	private boolean isBound = false;
	private ServiceConnection connection;//receives callbacks from bind and unbind invocations
	private Messenger replyTo = null; //invocation replies are processed by this Messenger
	
	public MainActivity()
	{
		
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
		this.connection = new RemoteServiceConnection();
		this.replyTo = new Messenger(new IncomingHandler());
	}
	
	@Override
	protected void onStart()
	{
		super.onStart();
		
		//Bind to the remote service
		Intent intent = new Intent();
		intent.setClassName("org.openmobster.remote.service.android.app", "org.openmobster.app.RemoteService");
		
		this.bindService(intent, this.connection, Context.BIND_AUTO_CREATE);
	}
	
	@Override
	protected void onStop() 
	{
		super.onStop();
		
		//Unbind if it is bound to the service
		if(this.isBound)
		{
			this.unbindService(connection);
			this.isBound = false;
		}
	}

	@Override
	protected void onResume()
	{
		try
		{
			super.onResume();
			
			//render the main screen
			String layoutClass = this.getPackageName()+".R$layout";
			String main = "main";
			Class clazz = Class.forName(layoutClass);
			Field field = clazz.getField(main);
			int screenId = field.getInt(clazz);
			this.setContentView(screenId);
			
			//Invoke Remote button
			Button invokeButton = (Button)ViewHelper.findViewById(this, 
			"invoke");
			invokeButton.setOnClickListener(new OnClickListener(){
				@Override
				public void onClick(View button) 
				{
					if(MainActivity.this.isBound)
					{
						//Setup the message for invocation
						Message message = Message.obtain(null, 1, 0, 0);
						try
						{
							//Set the ReplyTo Messenger for processing the invocation response
							message.replyTo = MainActivity.this.replyTo;
							
							//Make the invocation
							MainActivity.this.messenger.send(message);
						}
						catch(RemoteException rme)
						{
							//Show an Error Message
							Toast.makeText(MainActivity.this, "Invocation Failed!!", Toast.LENGTH_LONG).show();
						}
					}
					else
					{
						Toast.makeText(MainActivity.this, "Service is Not Bound!!", Toast.LENGTH_LONG).show();
					}
				}
			  }
			);
		}
		catch(Exception e)
		{
			e.printStackTrace(System.out);
		}
	}
	
	private class RemoteServiceConnection implements ServiceConnection
	{
		@Override
		public void onServiceConnected(ComponentName component, IBinder binder) 
		{	
			MainActivity.this.messenger = new Messenger(binder);
			
			MainActivity.this.isBound = true;
		}

		@Override
		public void onServiceDisconnected(ComponentName component) 
		{	
			MainActivity.this.messenger = null;
			
			MainActivity.this.isBound = false;
		}
	}
	
	private class IncomingHandler extends Handler
	{
		@Override
        public void handleMessage(Message msg) 
		{
			System.out.println("*****************************************");
			System.out.println("Return successfully received!!!!!!");
			System.out.println("*****************************************");
			
			int what = msg.what;
			
			Toast.makeText(MainActivity.this.getApplicationContext(), "Remote Service replied-("+what+")", Toast.LENGTH_LONG).show();
        }
	}
}
}}}

----

==== Download and Install Service App ====

  * [http://openmobster.googlecode.com/svn/samples/remoteservice.zip Download]

{{{
    cd app-android
}}}
 
{{{
   mvn -Papp-hot-deploy install
}}}

==== Download and Install Client App ====

  * [http://openmobster.googlecode.com/svn/samples/remoteclient.zip Download]

{{{
      cd app-android
}}}

{{{
      mvn -Papp-hot-deploy install
}}}

  * Launch the Client App and Press the *Invoke Service* button

----

*Related:* [AndroidArea Android Area]