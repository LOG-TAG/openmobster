#summary Sharing Content using the ContentProvider

=== Introduction ===

This tutorial covers how to use the ContentProvider component to share your content with other Apps.

----

==== Step 1: Extend android.content.ContentProvider ====

To start developing a ContentProvider, you must extend the _android.content.ContentProvider_ class and implement its 6 important methods. This tutorial will go through these methods and their usage one at a time

----

==== Step 2: onCreate() ====
{{{
        @Override
	public boolean onCreate() 
	{
		//Open the database
		this.sqliteOpenHelper = new DBHelper(this.getContext(),"tutorialdb",null,1);
		((DBHelper)this.sqliteOpenHelper).prePopulate(this.sqliteOpenHelper.getWritableDatabase(), TABLE);
		
		//Setup the UriMatcher
		this.uriMatcher = new UriMatcher(UriMatcher.NO_MATCH);
		this.uriMatcher.addURI(AUTHORITY, "objects", MATCH_ALL);
		this.uriMatcher.addURI(AUTHORITY, "object/#", MATCH_ID);
		
		return true;
	}
}}}
The onCreate is invoked when a ContentProvider is first created by the system. In this method you would do some setup related tasks. In this case, it is preparing the SQLite database for storage, and a UriMatcher instance to deal with Content Uris

----

==== Step 3: getType() ====
{{{
        @Override
	public String getType(Uri uri) 
	{
		return "vnd.android.cursor.dir"
	}
}}}
Implement this to handle requests for the MIME type of the data at the given URI. The returned MIME type should start with vnd.android.cursor.item for a single record, or vnd.android.cursor.dir/ for multiple items.

----

==== Step 4: query ====
{{{
        @Override
	public Cursor query(Uri uri, String[] projection, String selection, String[] selectionArgs,String sortOrder) 
	{
		//Query building helper class
		SQLiteQueryBuilder builder = new SQLiteQueryBuilder();
		
		//Set the table to query
		builder.setTables(TABLE);
		
		//See if this is a request to get all the objects or just the one with the specified oid
		if(uriMatcher.match(uri) == MATCH_ID)
		{
			builder.appendWhere("id="+uri.getLastPathSegment());
		}
		
		//execute the query
		Cursor cursor = builder.query(this.sqliteOpenHelper.getReadableDatabase(), projection, selection, selectionArgs, null, null, sortOrder,null);
		
		//sets up data watch so that the cursor is notified if data changes after it is returned
		cursor.setNotificationUri(this.getContext().getContentResolver(), uri);
		
		return cursor;
	}
}}}

The query method returns a _Cursor_ instance. This _Cursor_ object can be the _Cursor_ object that is used in the underlying SQLite database. In the implementation, it sets up a _SQLiteQueryBuilder_ to help construct the query to be made to the database. Using the _UriMatcher_ the method is able to decide if a single row is requested or all the rows of the table are to be returned. At the end of the database call, the _Cursor_ is setup to receive a notification if the data changes in the database after this _Cursor_ was returned

==== Invoking the query method ====
{{{
@Override
			public void onClick(View view) 
			{	
				System.out.println("*********ReadAll********************");
				
				//Set up the Content Provider URI where request needs to be made
				//in this case it is setup to read all the objects
				Uri uri = Uri.parse(TutorialContentProvider.CONTENT_URI+"/objects");
				
				//Get the ContentResolver to make the request
				ContentResolver resolver = MainActivity.this.getContentResolver();
				
				//Make the invocation
				Cursor cursor = resolver.query(uri, null, null, null, null);
				if(cursor.getCount() == 0)
				{
					return;
				}
				
				//Read the cursor and its data
				int idIndex = cursor.getColumnIndex(TutorialContentProvider.ID);
				int nameIndex = cursor.getColumnIndex(TutorialContentProvider.NAME);
				int valueIndex = cursor.getColumnIndex(TutorialContentProvider.VALUE);
				
				cursor.moveToFirst();
				do
				{
					String id = cursor.getString(idIndex);
					String name = cursor.getString(nameIndex);
					String value = cursor.getString(valueIndex);
					
					System.out.println("---------------------------------");
					System.out.println("ID: "+id);
					System.out.println("Name: "+name);
					System.out.println("Value: "+value);
					
					cursor.moveToNext();
				}while(!cursor.isAfterLast());
			}
}}} 

----

==== Step 5: insert ====
{{{
@Override
	public Uri insert(Uri uri, ContentValues values) 
	{
		//Get an instance of writable database
		SQLiteDatabase db = this.sqliteOpenHelper.getWritableDatabase();
		
		//Insert the data into the database
		long newId = db.insert(TABLE, null, values);
		
		//Make sure data is successfully added
		if(newId < 0)
		{
			throw new SQLException("Insert Failure on: "+uri);
		}
		
		//Setup the newUri to identify this newly created object
		Uri newUri = ContentUris.withAppendedId(uri, newId);
		
		//notify the system that a change has been made to the underlying data
		this.getContext().getContentResolver().notifyChange(newUri, null);
		
		return newUri;
	}
}}}
The incoming values are inserted into the database. A _Uri_ is created using the oid of the inserted record. Using this new _Uri_ a notification is sent telling the system that changes have occurred to the underlying data

==== Invoking the insert method ====
{{{
@Override
			public void onClick(View view) 
			{	
				System.out.println("*********Insert********************");
				
				//Setup the Uri for the invocation
				Uri uri = Uri.parse(TutorialContentProvider.CONTENT_URI+"/object");
				
				//Get the Resolver
				ContentResolver resolver = MainActivity.this.getContentResolver();
				
				//Setup the data to be inserted
				ContentValues newContent = new ContentValues();
				String id = GeneralTools.generateUniqueId();
				newContent.put("name", "NAME://"+id);
				newContent.put("value","VALUE://"+id);
				
				//Make the invocation. A new uri will be sent back
				Uri newUri = resolver.insert(uri, newContent);
				
				System.out.println("NewUri: "+newUri);
			}
}}}

----

====Step 6: update====

----

====Step 7: delete====

----

==== Full Source ====

----


