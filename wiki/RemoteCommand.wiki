#summary RemoteCommand component
=== Introduction ===

The OpenMobster command framework provides a way for developers to encapsulate their service logic within commands. These commands are executed in response to a user interaction. The commands are invoked during the event handling lifecycle. There are three types of commands that are supported

  * AsyncCommand: For Ajax usecases

  * RemoteCommand: For commands that take a long time to execute. It automatically provides a busy indicator and does not allow any user interaction until the command is finished

  * LocalCommand: This is for fast commands.

=== RemoteCommand ===

Implement the *org.openmobster.core.mobileCloud.api.ui.framework.command.RemoteCommand* interface
{{{
public final class BusyCommand implements RemoteCommand
}}}


=== doViewBefore ===

The _doViewBefore_ is invoked right before the actual service logic is called. This is for some UI related pre-processing. This phase executes on the UI thread.
{{{
        public void doViewBefore(CommandContext commandContext)
	{
		//Show a message before Action phase
		Activity activity = (Activity)commandContext.getAppContext();
		Toast.makeText(activity, 
				"Pre-Action Processing in progess", 
				Toast.LENGTH_LONG).show();
	}
}}}

=== doAction ===

The _doAction_ actually carries the business logic for the user interaction. This is a non-UI phase, and UI related code should not be executed during this phase
{{{
        public void doAction(CommandContext commandContext) 
	{
		try
		{
			//sleep for 5 seconds simulating an operational delay
			Thread.currentThread().sleep(5000); 
		}
		catch(Exception e)
		{
			AppException appe = new AppException();
			appe.setMessage(e.getMessage());
			ErrorHandler.getInstance().handle(appe);
			
			throw appe;
		}
	}	
}}}

=== doViewAfter ===

This _doViewAfter_ phase consists of UI related code after the service invocation. This happens on the UI thread.
{{{
        public void doViewAfter(CommandContext commandContext)
	{
		//Show message upon successful completion
		Activity currentActivity = (Activity)Registry.getActiveInstance().getContext();
		ViewHelper.getOkModal(currentActivity, "Busy Command", "Command Execution Finished!!").
		show();
	}
}}}

=== doViewError ===

This _doViewError_ phase in invoked in case some exception occurs during the action phase. It allows the user to recover by showing some error message to the user
{{{
        public void doViewError(CommandContext commandContext)
	{
		//Show message upon App Exception
		Activity currentActivity = (Activity)Registry.getActiveInstance().getContext();
		ViewHelper.getOkModal(currentActivity, "App Error", 
		this.getClass().getName()+" had an error!!\n\n"+commandContext.getAppException().getMessage()).
		show();
	}
}}}

=== How to invoke the command? ===
{{{
        private static class ClickListener implements OnItemClickListener
	{	
		private ClickListener()
		{
		}
		
		public void onItemClick(AdapterView<?> parent, View view, int position,
				long id)
		{
			if(position == 0)
			{
				//Execute the Ajax Command
				CommandContext commandContext = new CommandContext();
		     	commandContext.setTarget("/ajax/command");
		     	Services.getInstance().getCommandService().execute(commandContext);
			}
			else if(position == 1)
			{
				//Execute the Busy Command
				CommandContext commandContext = new CommandContext();
		     	commandContext.setTarget("/busy/command");
		     	Services.getInstance().getCommandService().execute(commandContext);
			}
			else if(position == 2)
			{
				//Execute the Fast Command
				CommandContext commandContext = new CommandContext();
		     	commandContext.setTarget("/fast/command");
		     	Services.getInstance().getCommandService().execute(commandContext);
			}
		}
	}
}}}

=== Configuration ===

Before the command can be invoked, it must be registered in the moblet-app/moblet-app.xml file
{{{
<!-- Command Framework -->
		<command id="/ajax/command">org.openmobster.showcase.app.command.framework.AjaxCommand</command>
		<command id="/busy/command">org.openmobster.showcase.app.command.framework.BusyCommand</command>
		<command id="/fast/command">org.openmobster.showcase.app.command.framework.FastCommand</command>
	</commands>
}}}