#summary Get Started From Source Code

=== Checkout Source Code ===

  * svn checkout http://openmobster.googlecode.com/svn/trunk/ openmobster-read-only


=== Build the Project ===

  * Full Build: *mvn -Dmaven.test.skip -PmobileCloud install*

This will build the entire project which includes the _Cloud Server Modules_, _Android System Modules_, _BlackBerry System Modules_, and _Development Tools_ like the *AppCreator*.


=== Running AppCreator ===

AppCreator tool is located under dev-tools/appCreator. To use from source:

  * Go to the _appCreator_ module: *cd dev-tools/appCreator*

  * Build the module: *mvn package*

  * The jar file will be in the target directory

  * java -jar appCreator.jar

More details are available [http://code.google.com/p/openmobster/wiki/GetStarted here]

=== Cloud Server Modules Reference ===

  * *synchronizer*: The Synchronization Engine

  * *dataService*: Apache MINA based Socket Server. All communication between the devices and the Cloud enter via this service.

  * *mobileObject*: System service used for mobilization of objects between the Cloud and the devices

  * *security*: Components for Authorization, Account Provisioning, and Device Provisioning

  * *api*: Provides the App Developer API for the server side Cloud components like Sync Channels, and Service Beans

  * *mobileContainer*: The core service container. It runs on a JBoss Microcontainer based kernel

  * *services*: The core services registered with the Mobile Container.

  * *moblet-management*: Components for an internal App Store. All Apps when deployed in the Cloud are registered with this service. This allows easy provisioning of these Apps on the devices via the Cloud Manager App.

  * *console*: Command Line Cloud Console. This will be replaced with a richer GWT/SmartGWT based Management Console in 2.2

  * *console-server*: Server Side components of the Cloud Console.

  * *agent-provisioning*: Components for OTA provisioning of the Cloud Manager App. Cloud Manager App provides the shared runtime for Cloud system services on the device.

  * *api-CloudConnector*: Internal API used by the command line Cloud Console to communicate with the Cloud Server

  * *common*: Contains some useful internal utility components

=== Android System Modules Reference ===

The Android System Modules are located under *mobileCloud/android/2_0*.

  * *sync*: The device side Synchronization Engine.

  * *mobileObject*: The device side mobileObject service for mobilizing objects between the device and the Cloud

  * *connection*: Service that handles all the low-level networking functions like making secure connections with the Cloud, efficiently managing active/incoming push connections from the Cloud

  * *bus*: Internal low-level service for Inter-App communication between the OpenMobster based Cloud Apps

  * *api*: App Developer API. Provides components like MobileBeans (auto-synchronized channel objects), MVC Framework, RPC service, etc

  * *mobileCloud-runtime*: The Device-level shared runtime for the system-level Cloud services. This runtime is accessed by all the OpenMobster based Cloud Apps installed on the device. The system services it provides are synchronization, networking, push notifications, etc.

  * *moblet-runtime*: The App-level isolated runtime for Cloud Services bundled with each OpenMobster based Cloud App. 

  * *cloudManager*: The Cloud Manager App. This App is required to be installed on the device before and Cloud App can run. The provides management features and bundles the mobileCloud-runtime.

  * *native-framework*: Provides integration of the high level MVC framework with the low-level native services. Think of this as an SPI implementation for the MVC framework.

=== Development Tools Modules Reference ===

Development Tools help App Developers develop OpenMobster based Cloud Apps. The goal is to improve developer productivity by providing easy dependency management, efficient unit/integration testing environment, etc.

  * *appCreator*: AppCreator is a Apache Maven based development tool.

  * *dev-cloudserver*: A fully functional Cloud Server that for efficient unit as well as integration testing.

  * *android-devcloud*: A Development Phase Cloud Manager App. The goal is to provide an efficient mobileCloud-runtime during development. It automates all the manual security/provisioning workflows needed in a real setup.

  * *rimos-devcloud*: The Development Phase Cloud Manager App for the BlackBerry OS (version 4.3+)