#summary Device-to-Device Push Framework

==== Introduction ====

OpenMobster *2.2-M7*, introduces a new device to device push framework. Using this framework developers can write Apps which communicate with other devices in the cloud and vice versa. Some applications of this would be a Chat App or an Instant Messaging App.


==== Step 1: Extend org.openmobster.android.api.d2d.D2DActivity ====

  * Override the *onStart* method to start the CloudService

{{{
       @Override
	protected void onStart()
	{
		super.onStart();
		
		CloudService.getInstance().start(this);
	}
}}}

  * Implement the *callback* method to handle the GUI aspects of receiving an incoming push message

{{{
public void callback(D2DMessage message)
	{
		//Append a newly received message from the chat system
		LinearLayout layout = (LinearLayout)ViewHelper.findViewById(MainActivity.this, "layout");
		TextView chatView = new TextView(MainActivity.this);
		chatView.setText(message.getMessage());
		layout.addView(chatView);
		
		Toast.makeText(MainActivity.this, message.getMessage(), Toast.LENGTH_SHORT).show();
		
		TextView user = (TextView)ViewHelper.findViewById(this, "user");
		user.setText(message.getFrom());
		this.to = message.getFrom();
	}
}}}

==== Step 2: Configuration ====

  * In AndroidManifest.xml, register the *org.openmobster.android.api.d2d.D2DReceiver* broadcast receiver

{{{
<receiver android:name="org.openmobster.android.api.d2d.D2DReceiver">
                <intent-filter>
                    <!-- action should be d2d://{packagename} of the App -->
                    <action android:name="d2d://com.chat.android.app" />
                </intent-filter>
         </receiver>
}}}

  * Also in AndroidManifest.xml, register the *org.openmobster.core.mobileCloud.api.ui.framework.push.PushBroadcastReceiver* to receive and notify arrival of Push messages
{{{
<receiver android:name="org.openmobster.core.mobileCloud.api.ui.framework.push.PushBroadcastReceiver">
    		<intent-filter>
                        <!-- Action should be the {packagename} of the App-->
    			<action android:name="com.chat.android.app"/>
    		</intent-filter>
    	</receiver>
}}}

  * In openmobster-app.xml, configure the Push settings as follows:
{{{
<app-conf>
	<encryption>false</encryption>
	
	<push>
		<launch-activity-class>org.openmobster.app.MainActivity</launch-activity-class>
		<icon-name>push</icon-name>
	</push>
</app-conf>
}}}

  * *launch-activity-class:* Is the Activity that must be launched when a Push notification is clicked

  * *icon-name:* Is the icon to display with the Push notification

==== Step 3: Sample App ====

The OpenMobster, 2.2-M7 binary distribution comes packaged with a sample application for the Device-To-Device Push Framework. It is a simple *Chat* app and its goal is to show how the framework should be used to build more complex app. The app is located under *AppCreator/sampleApps/chat*