#summary iOS: Beginner's Guide

*Related:* [AndroidArea Android Area], [BeginnerZone Beginner Area]

==== Introduction ====
This guide is designed to help you write your first iOS application. At the end of the guide you will get a idea of how the different parts of an iOS application come together to form an App.

==== XCode ====
Before you can write any code, you need to install the development ide called XCode and the SDKs that let you develop iOS apps. You can download the IDE+SDKs from http://developer.apple.com for free.

The version of XCode I am using is 4.0.2 with iOS SDK 4.3.

==== Getting Started ====
Before getting into the coding, it is important to understand the task at a high level. If we were to dissect an iOS App, it really boils down to two main tasks

  * Developing/Laying out the UI components using a tool called Interface Builder

  * Connecting these UI components to Controllers so that you can respond to user interaction

==== Interface Builder ====
In this App we will layout the UI components using Interface Builder. Interface Builder is a GUI development tool that lets you build out your GUI visually.

When you start Interface Builder you will see the following four items:

  * *File's Owner*: An instance of UIApplication. The event queue for your App is managed by this object

  * *First Responder*: No idea. Never used it. 

  * *Your App's Delegate*: The Controller for this GUI. You will write your code within this component

  * *Window*: The window of the App. You will add UI components to this window

In this App you add two Labels and two Buttons to the window. Towards the top of the window there will be a Label and a Button. This widget will flip through mobile operating systems in the market. Towards the bottom of the window we will add another Label and a Button. This widget flips through the desktop operating systems in the market.

==== Adding a Label ====
From the Object Library, select a Label and drag it on to the window. You can adjust the size of the Label as well.

==== Adding a Button ====
From the Object Library, select a Button and drag it on to the window. You can adjust the size of the Button. First button make the value, *Next Mobile OS*, Second button make the value, *Next Desktop OS*.

==== Prepare the App Delegate (Controller) ====
You can connect the above components to the App Delegate. In order to connect the components you have to expose them to Interface Builder. You App Delegate should have the following code:
{{{
#import <UIKit/UIKit.h>

@interface HelloWorldAppDelegate : NSObject <UIApplicationDelegate> 
{
    @private
    
    //The view objects
    UILabel *mobileos;
    UILabel *desktopos;
    
    //The model objects
    NSMutableArray *mobile;
    NSMutableArray *desktop;
    int mobilePtr;
    int desktopPtr;
}

//The Labels are wired up to instances in the controller here
@property (nonatomic,retain) IBOutlet UIWindow *window;
@property (nonatomic,retain) IBOutlet UILabel *mobileos;
@property (nonatomic,retain) IBOutlet UILabel *desktopos;

//These hold the data to be used in the App
@property (nonatomic,retain) NSMutableArray *mobile;
@property (nonatomic,retain) NSMutableArray *desktop;

//Buttons are wired to these methods
-(IBAction)nextMobileOs:(id)sender;
-(IBAction)nextDesktopOs:(id)sender;

@end
}}}

In this you expose the UILabels using the construct called *IBOutlet*. Besides the Labels it also provides methods that should be invoked when the respective buttons are pressed. This is done using the construct called *IBAction*.

==== Connecting the components ====
Once the Outlets are exposed you should be able to connect the two together. In Inteface Builder, select the App Delegate. In your component Inspector go to Connections. Under Connections you should see your UILabel outlets. You can drag the outlet to the UILabel component. This completes the connection. In the same way you will also see the *IBAction* components that need to be connected to their respective buttons.

Once these connections are made your Interface Builder tasks are finished

==== Implementing the App Delegate ====
Now that Interface Builder is done, the only task that remains is implementing the App Delegate to respond to user interactions.

===== Loading the data =====
{{{
-(id)init
{
    [super init];
    
    //setup the mobile os data
    self.mobile = [[NSMutableArray alloc] init];
    [mobile addObject:@"iOS"];
    [mobile addObject:@"Android"];
    [mobile addObject:@"Thats it!!! The rest suck ;)"];
    
    //setup the desktop os data
    self.desktop = [[NSMutableArray alloc] init];
    [desktop addObject:@"OSX"];
    [desktop addObject:@"Linux"];
    [desktop addObject:@"Winblows ;)"];
    
    return self;
}
}}}

===== Showing the data at startup =====
{{{
- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // Override point for customization after application launch.
    [self.window makeKeyAndVisible];
    
    //show the initial mobile data
    mobilePtr = 0;
    self.mobileos.text = [self.mobile objectAtIndex:mobilePtr];
    
    //show the initial desktop data
    desktopPtr = 0;
    self.desktopos.text = [self.desktop objectAtIndex:desktopPtr];
    
    return YES;
}
}}}

===== Responding to the Mobile OS button =====
{{{
-(IBAction)nextMobileOs:(id)sender
{
    mobilePtr++;
    if(mobilePtr >= [self.mobile count])
    {
        mobilePtr = 0;
    }
    
    self.mobileos.text = [self.mobile objectAtIndex:mobilePtr];
}
}}}

===== Responding to the Desktop OS button =====
{{{
-(IBAction)nextDesktopOs:(id)sender;
{
    desktopPtr++;
    if(desktopPtr >= [self.desktop count])
    {
        desktopPtr = 0;
    }
    
    self.desktopos.text = [self.desktop objectAtIndex:desktopPtr];
}
}}}

===== Full Src of App Delegate =====
{{{
#import "HelloWorldAppDelegate.h"

@implementation HelloWorldAppDelegate


@synthesize window=_window;
@synthesize mobileos;
@synthesize desktopos;
@synthesize mobile;
@synthesize desktop;

-(id)init
{
    [super init];
    
    //setup the mobile os data
    self.mobile = [[NSMutableArray alloc] init];
    [mobile addObject:@"iOS"];
    [mobile addObject:@"Android"];
    [mobile addObject:@"Thats it!!! The rest suck ;)"];
    
    //setup the desktop os data
    self.desktop = [[NSMutableArray alloc] init];
    [desktop addObject:@"OSX"];
    [desktop addObject:@"Linux"];
    [desktop addObject:@"Winblows ;)"];
    
    return self;
}

- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions
{
    // Override point for customization after application launch.
    [self.window makeKeyAndVisible];
    
    //show the initial mobile data
    mobilePtr = 0;
    self.mobileos.text = [self.mobile objectAtIndex:mobilePtr];
    
    //show the initial desktop data
    desktopPtr = 0;
    self.desktopos.text = [self.desktop objectAtIndex:desktopPtr];
    
    return YES;
}

- (void)applicationWillResignActive:(UIApplication *)application
{
    /*
     Sent when the application is about to move from active to inactive state. This can occur for certain types of temporary interruptions (such as an incoming phone call or SMS message) or when the user quits the application and it begins the transition to the background state.
     Use this method to pause ongoing tasks, disable timers, and throttle down OpenGL ES frame rates. Games should use this method to pause the game.
     */
}

- (void)applicationDidEnterBackground:(UIApplication *)application
{
    /*
     Use this method to release shared resources, save user data, invalidate timers, and store enough application state information to restore your application to its current state in case it is terminated later. 
     If your application supports background execution, this method is called instead of applicationWillTerminate: when the user quits.
     */
}

- (void)applicationWillEnterForeground:(UIApplication *)application
{
    /*
     Called as part of the transition from the background to the inactive state; here you can undo many of the changes made on entering the background.
     */
}

- (void)applicationDidBecomeActive:(UIApplication *)application
{
    /*
     Restart any tasks that were paused (or not yet started) while the application was inactive. If the application was previously in the background, optionally refresh the user interface.
     */
}

- (void)applicationWillTerminate:(UIApplication *)application
{
    /*
     Called when the application is about to terminate.
     Save data if appropriate.
     See also applicationDidEnterBackground:.
     */
}

-(IBAction)nextMobileOs:(id)sender
{
    mobilePtr++;
    if(mobilePtr >= [self.mobile count])
    {
        mobilePtr = 0;
    }
    
    self.mobileos.text = [self.mobile objectAtIndex:mobilePtr];
}

-(IBAction)nextDesktopOs:(id)sender;
{
    desktopPtr++;
    if(desktopPtr >= [self.desktop count])
    {
        desktopPtr = 0;
    }
    
    self.desktopos.text = [self.desktop objectAtIndex:desktopPtr];
}

- (void)dealloc
{
    [_window release];
    
    if(mobileos != nil)
    {
        [mobileos release];
    }
    
    if(desktopos != nil)
    {
        [desktopos release];
    }
    
    [mobile release];
    [desktop release];
    
    [super dealloc];
}
@end
}}}

==== Download ====

You can download this project [http://openmobster.googlecode.com/svn/samples/HelloWorld.zip here].