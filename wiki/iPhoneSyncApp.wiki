#summary iPhone Sync App tutorial

*Related Links:* [iPhoneShowCase iPhone Showcase]

----

This tutorial teaches how to architect a simple Sync App for the iPhone platform

==== Step 1: Write the server side MobileBean component ====
This step involves writing your bean that will be mobilized. It implements the _org.openmobster.server.api.model.MobileBean_ interface which is merely a marker interface.
{{{
/**
 * The 'SyncBean' that will be stored/synchronized with the device
 * 
 * @author openmobster@gmail.com
 */
public class SyncBean implements MobileBean, Serializable
{
	private static final long serialVersionUID = 8484238078447118385L;

	@MobileBeanId
	private String beanId; //uniquely identifies the bean to the sync system	
	private String value1;
	private String value2;
	private String value3;
	
	public SyncBean()
	{
		
	}

	public String getBeanId() 
	{
		return beanId;
	}

	public void setBeanId(String beanId) 
	{
		this.beanId = beanId;
	}

	public String getValue1() 
	{
		return value1;
	}

	public void setValue1(String value1)
	{
		this.value1 = value1;
	}

	public String getValue2() 
	{
		return value2;
	}

	public void setValue2(String value2) 
	{
		this.value2 = value2;
	}

	public String getValue3() 
	{
		return value3;
	}

	public void setValue3(String value3) 
	{
		this.value3 = value3;
	}
}
}}}

This bean is uniquely identified by the field that is annotated with the _org.openmobster.server.api.model.MobileBeanId_ annotation.


==== Step 2: Develop the Synchronization Channel ====
This step involves developing a sync channel that mobilizes the _org.openmobster.sync.app.SyncBean_ instances. 
{{{
/**
 * The SyncBeanChannel mobilizes the 'SyncBean' instances by integrating with the Sync Engine
 * 
 * @author openmobster@gmail.com
 */
@ChannelInfo(uri="sync_bean_channel", mobileBeanClass="org.openmobster.sync.app.SyncBean")
public class SyncBeanChannel implements Channel
}}}
The ChannelInfo annotation: uri = unique id for this channel, mobileBeanClass = identifies the MobileBean class that is managed by this channel

SyncBeanChannel implements the Channel interface.

{{{
@Override
	public List<? extends MobileBean> bootup() 
	{
		List<SyncBean> beans = this.store.getAll();
		List<SyncBean> bootupOnly = new ArrayList<SyncBean>();
		
		//Only send first 5 beans during booting up the sync channel
		for(int i=0; i<5; i++)
		{
			bootupOnly.add(beans.get(i));
		}
		
		return bootupOnly;
	}
}}}

_bootup_ method provides just enough MobileBean instances that are needed to make the App functional. The remaining beans are synchronized in the background without holding up the App.

{{{
@Override
	public MobileBean read(String id) 
	{
		return this.store.get(id);
	}

	@Override
	public List<? extends MobileBean> readAll() 
	{
		return this.store.getAll();
	}
}}}

_read_ provides the specified MobileBean instance.

_readAll_ provides all the MobileBean instances.

==== Step 3: Get the Number of beans ====
Now, on the iPhone App side, we need to get the number of beans that will be displayed in the UITableView.
{{{
-(NSInteger) tableView:(UITableView *)tableView numberOfRowsInSection:(NSInteger)section
{
	//Read the synchronized beans from the channel
	NSArray *beans = [MobileBean readAll:@"sync_bean_channel"];
	
	if(beans == nil || [beans count] == 0)
	{
		channelIsEmpty = YES;
		return 1;
	}
	else 
	{
		channelIsEmpty = NO;
		return [beans count];
	}
}
}}}

==== Step 4: Display each individual bean within the table cell ====
{{{
-(UITableViewCell *) tableView:(UITableView *)tableView cellForRowAtIndexPath:(NSIndexPath *)indexPath
{
	//Prepare the table cell 
	UITableViewCell *local = [tableView dequeueReusableCellWithIdentifier:@"sync_bean"];
	if(local == nil)
	{
		local = [[UITableViewCell alloc] initWithFrame:CGRectZero reuseIdentifier:@"sync_bean"];
		local = [local autorelease];
	}
	
	//Check in case the channel is empty and needs manual synchronization
	if(channelIsEmpty)
	{
		local.textLabel.text = @"Sync Manually";
		return local;
	}
	
	//Read the synchronized beans from the channel
	NSArray *beans = [MobileBean readAll:@"sync_bean_channel"];
	
	//Find the Bean in question
	int index = indexPath.row;
	MobileBean *bean = [beans objectAtIndex:index];
	
	//Display the 'value1' field of the bean
	NSString *display = [bean getValue:@"value1"];
	local.textLabel.text = display;
	
	return local;
	
}
}}}

==== Step 5: Show bean details when selected ====
{{{
-(void) tableView:(UITableView *)tableView didSelectRowAtIndexPath:(NSIndexPath *)indexPath
{
	//Handle selection of the item
	[tableView deselectRowAtIndexPath:indexPath animated:YES];
	[tableView scrollToRowAtIndexPath:indexPath atScrollPosition:UITableViewScrollPositionMiddle animated:YES];
	
	//Check if the channel is empty and needs manual synchronization
	if(channelIsEmpty)
	{
		SyncService *syncService = [SyncService getInstance];
		[syncService performBootSync:@"sync_bean_channel" :NO];
		channelIsEmpty = NO;
		
		//reload the table
		[beanList reloadData];
		
		return;
	}
	
	//Read all the beans
	NSArray *beans = [MobileBean readAll:@"sync_bean_channel"];
	
	//Get the selected bean
	int index = indexPath.row;
	MobileBean *bean = [beans objectAtIndex:index];
	
	//Get the value of all the fields
	NSString *value1 = [bean getValue:@"value1"];
	NSString *value2 = [bean getValue:@"value2"];
	NSString *value3 = [bean getValue:@"value3"];
	NSString *message = [NSString stringWithFormat:@"Value2=%@, Value3=%@",value2,value3];
	
	//Setup the Dialog Box
	UIAlertView *dialog = [[UIAlertView alloc] initWithTitle:value1
													 message:message 
													delegate:self cancelButtonTitle:@"OK" 
										   otherButtonTitles:nil];
	
	//Display the dialog
	dialog = [dialog autorelease];
	[dialog show];
}
}}}

==== Step 6: Configuration ====

You must specify the channels that your App will be using. This is done in the _Resources/openmobster-app.xml_ file.
{{{
<app-conf>
	<channels>
		<channel access="write">sync_bean_channel</channel>
	</channels>
</app-conf>
}}}

==== Download this Tutorial ====
  * [http://openmobster.googlecode.com/svn/samples/iphone-syncapp.zip Download]

  * Start the Cloud Server: cd cloud : *mvn -PrunCloud integration-test*

  * You should be able to open SyncApp project inside XCode.

  * Inside XCode do a 'Build and Run'. This should launch the App inside a simulator

  * At first you will have to activate the App with the Cloud. Use the account, Username: blah2@gmail.com, Password: blahblah2

  * Then specify the IP address of the Cloud Server. It should something like a 192.168.xx.xx address. Do not use _localhost_ or _127.0.0.1_.

----

*Related Links:* [iPhoneShowCase iPhone Showcase]