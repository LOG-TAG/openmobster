#summary AppCreator Project Structure Explained

=== Introduction ===

AppCreator is a maven based project skeleton generator. It generates a complete OpenMobster project. The project is complete with proper dependency management so that the user does not have to manually perform these steps. This tutorial covers different aspects of AppCreator.

=== Project Layout ===
Each generated project has the following 3 maven modules:

  * *app-android* - Contains the App for the Android OS

  * *cloud* - Contains the *OpenMobster Cloud Server* based artifacts which will be deployed on the cloud side

  * *moblet* - Represents a *OpenMobster Moblet* which combines both the device side and cloud side artifacts into one single artifact. The moblet is deployed as a simple jar file into the *OpenMobster Cloud Server*. When the moblet is deployed into the Cloud server it is registered with the built-in App store. Once registered with the App Store, this moblet can be easily downloaded, installed, and managed on the actual device via the _App Store_ functionality under the _Cloud Manager_ app 

=== Build Command ===
{{{
  mvn install
}}}

This command builds all the artifacts including running tests

=== Development Mode Cloud Manager App ===
This Development Mode Cloud Manager app improves developer productivity by automating the manual provisioning/security processes by automatically provisioning a Cloud account under the name: "blah2@gmail.com".

*Note:* This is a strict development stage only optimization and should not be used in a real world setting. 

To hot deploy your Android App and Cloud Manager app, use the following command
{{{
cd app-android
mvn -Phot-deploy install
}}}

Once the Cloud Manager app is deployed, only the Android App needs to be deployed as development progresses.

To hot deploy just your Android App, use the following command
{{{
cd app-android
mvn -Papp-hot-deploy install
}}}

=== Standalone Cloud Server ===
On the Cloud-side of things, there is a fully functional Standalone Cloud Server provided that you can run right from inside your Maven environment.

Command to run the Standalone Cloud Server
{{{
mvn -PrunCloud integration-test
}}}


Command to run the Standalone Cloud Server in *debug mode*
{{{
mvn -PdebugCloud integration-test
}}}

=== JBoss AS Deployment ===
Once the App and its corresponding Cloud artifacts are developed and tested end-to-end, you can aggregate all these artifacts into a single moblet jar ready for deployment into a JBoss AS based Cloud Server.

This single artifact when deployed into the JBoss AS based Cloud Server performs all necessary registrations with the system and is ready for deploying the app onto a real phone via the Internet.

Commands:

  * Generate the app and deploy into the JBoss AS instance:
    {{{
       cd moblet
       mvn -Pjboss-install install
    }}}

=== Some tips ===

  * OpenMobster codebase is upgraded to use Maven 3.0.3. Make sure you are using this version of maven.

  * Property *openmobster.version* is specified in the top-level pom.xml. This tells the system which version of OpenMobster system you want to use. The default value is: 2.2-SNAPSHOT

  * Property *version.android.api* is specified in the top-level pom.xml. This tells the system which version of the Android API to use. The default value is : 12

  * ANDROID_HOME should be set as an environment variable. This should point to the directory where your local Android SDK is installed

  * In app-android/pom.xml, you must specify the right location for your signing key under the *android.keystore.location* property

  * In the *jar-signer* plugin you must specify the appropriate values for *storepass*, *keypass*, and *alias* depending on your signing certificate

  * In the *moblet/pom.xml* file specify the right location where your JBoss-5.1.0.GA is installed. This is specified in the *jboss.home* property 