#summary Javascript Bridge

This tutorial will cover how to write apps using the traditional HTML/Javascript technologies within an App. It will introduce how to make invocations from the Javascript layer to the native Java Layer.

==== Step 1: WebView Control ====
The Android WebView Control can be used to display HTML code inside a native app. It can load the content from a remote server or from a local file. You add a WebView control to your layout just like any other UI control
{{{
<?xml version="1.0" encoding="utf-8"?>
<LinearLayout xmlns:android="http://schemas.android.com/apk/res/android"
	android:orientation="vertical" android:layout_width="fill_parent"
	android:layout_height="fill_parent">
	
	<WebView
        android:id="@+id/webview"
    	android:layout_width="fill_parent" 
    	android:layout_height="wrap_content"
     />                                                                         
</LinearLayout>
}}}

==== Step 2: Setup the WebView Control ====
Inside the _onResume_ method of your Activity, find and assign the WebView Control
{{{
//Find the WebView control
this.webView = (WebView)ViewHelper.findViewById(this, "webview");
}}}

==== Step 3: Enable Javascript ====
{{{
//Enable Javascript...This is needed so that Javascript is allowed to execute
//inside the WebView
WebSettings webSettings = this.webView.getSettings();
webSettings.setJavaScriptEnabled(true);
}}}

==== Step 4: Register a native Java object for invocation ====
{{{
//Register the 'Javascript Bridge' class under the 'jb' namespace
//this class can be invoked from the HTML/Javascript side
this.webView.addJavascriptInterface(new JavascriptBridge(), "jb");
}}}

The *JavaScriptBridge* is a POJO object which will now be accessible
from the Javascript layer via the specified *jb* namespace.
{{{
        final class JavascriptBridge
	{
		public String callMe(String param1, String param2)
		{
			//Generate the returnValue from the bridge
			String toastValue = param1 + "," + param2;
			
			//Setup the Toast
			Toast toast = Toast.makeText(MainActivity.this, toastValue, Toast.LENGTH_LONG);
			
			//Show the Toast
			toast.show();
			
			return toastValue;
		}
	}
}}}

==== Step 5: Load a local HTML/Javascript file ====
{{{
//Load assets/html/index.html resource into the WebView control
this.webView.loadUrl("file:///android_asset/html/index.html");
}}}
Loads a locally stored asset stored under assets/html/index.html

==== Step 6: Create a local HTML/Javascript file ====
{{{
<html>
	<head>
		<script type="text/javascript">
			function invoke(param1,param2)
			{
				//invoking the JavascriptBridge registered under the 'jb' namespace
				var result = jb.callMe(param1,param2);
				
				//doing something with the return value, it should be concatenation
				//of the two input parameters
				alert(result);
			}
		</script>
	</head>
	<body>
	<h2>Demonstrating Android Javascript-To-Java Bridge</h2>
		
	<!-- setup a button to invoke the Javascript Bridge -->
        <input type="button" value="Invoke Bridge"onclick="invoke('Hello','World');"/>
	</body>
</html>
}}}

==== Full Source code for the Activity ====
{{{
/**
 * @author openmobster@gmail.com
 * 
 */
public class MainActivity extends Activity
{
	private WebView webView;
	
	public MainActivity()
	{
		
	}
	
	@Override
	protected void onCreate(Bundle savedInstanceState)
	{
		super.onCreate(savedInstanceState);
	}
	
	@Override
	protected void onStart()
	{
		super.onStart();
	}

	@Override
	protected void onResume()
	{
		try
		{
			super.onResume();
			
			//render the main screen
			this.setContentView(ViewHelper.findLayoutId(this, "main"));
			
			//Find the WebView control
			this.webView = (WebView)ViewHelper.findViewById(this, "webview");
			
			//Enable Javascript...This is needed so that Javascript is allowed to execute
			//inside the WebView
			WebSettings webSettings = this.webView.getSettings();
			webSettings.setJavaScriptEnabled(true);
			
			//Register the 'Javascript Bridge' class under the 'jb' namespace
			//this class can be invoked from the HTML/Javascript side
			this.webView.addJavascriptInterface(new JavascriptBridge(), "jb");
			
			//Register the WebChromeClient to assist with alerts/debugging
			this.webView.setWebChromeClient(new MyWebChromeClient());
			
			//Load assets/html/index.html resource into the WebView control
			this.webView.loadUrl("file:///android_asset/html/index.html");
		}
		catch(Exception e)
		{
			e.printStackTrace(System.out);
		}
	}
	
	final class JavascriptBridge
	{
		public String callMe(String param1, String param2)
		{
			//Generate the returnValue from the bridge
			String toastValue = param1 + "," + param2;
			
			//Setup the Toast
			Toast toast = Toast.makeText(MainActivity.this, toastValue, Toast.LENGTH_LONG);
			
			//Show the Toast
			toast.show();
			
			return toastValue;
		}
	}
	
	/**
     * Provides a hook for calling "alert" from javascript. Useful for
     * debugging your javascript.
     */
    final class MyWebChromeClient extends WebChromeClient 
    {
        @Override
        public boolean onJsAlert(WebView view, String url, String message, JsResult result) 
        {
            Log.d("JavascriptBridge", message);
            result.confirm();
            return true;
        }
    }
}
}}}

==== Download this tutorial ====

  * [http://openmobster.googlecode.com/svn/samples/javascript-bridge.zip Download]

  * Make sure the Android Simulator is running

  * cd app-android: mvn -Papp-hot-deploy install

  * This is a simple Activity and the *DevCloud* app does not need to be running

==== Conclusion ==== 
This is a very simple HTML app. This is the stepping stone for many complex HTML5 stuff that is possible using the WebView Control. To get a glimpse of what is possible I would recommend taking a look at the more advanced [HTML5SyncApp HTML5 Sync App tutorial].