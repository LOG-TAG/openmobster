#summary Android Service Component (Start/Stop type)

==== Introduction ====
A service is an application component that can run some long running task in the background without the need for a user interface. Some other application component can start the service and this service will then keep on running even if the user switches to another application.

There are two types of service components

  * Started : This service is started by another application component. Once started it keeps running until someone stops the service. This type of service provides several callbacks which is the topic of this  tutorial.

  * Bound: A service is bound when another application component invokes the _bindService_ method. Service binding is used to perform client-server like communication between the service and the caller. These invocations can be performed between different processes as well. Multiple callers can bind to a service. The service stays active until there is atleast one caller bound to the service.

This tutorial will cover the *Started* service component.

==== Step 1: Create a *Service* component ====
{{{
import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.widget.Toast;

/**
 * 
 * @author openmobster@gmail.com
 */
public class DemoService extends Service
}}}

==== Step 2: Implement the *onStartCommand* callback ====
{{{
@Override
	public int onStartCommand(Intent intent, int flags, int startId) 
	{
		super.onStartCommand(intent, flags, startId);
		
		//Announcement about starting
		Toast.makeText(this, "Starting the Demo Service", Toast.LENGTH_SHORT).show();
		
		//Start a Background thread
		isRunning = true;
		Thread backgroundThread = new Thread(new BackgroundThread());
		backgroundThread.start();
		
	    // We want this service to continue running until it is explicitly
	    // stopped, so return sticky.
	    return START_STICKY;
	}
}}}

==== Step 3: Implement the *onDestroy* callback ====
{{{
@Override
	public void onDestroy() 
	{
		super.onDestroy();
		
		//Stop the Background thread
		isRunning = false;
		
		//Announcement about stopping
		Toast.makeText(this, "Stopping the Demo Service", Toast.LENGTH_SHORT).show();
	}
}}}

==== Step 4: Implement the *Background Thread* ====
{{{
private class BackgroundThread implements Runnable
	{
		int counter = 0;
		public void run()
		{
			try
			{
				counter = 0;
				while(isRunning)
				{
					System.out.println(""+counter++);
					Thread.currentThread().sleep(5000);
				}
				
				System.out.println("Background Thread is finished.........");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
	}
}}}

==== Step 5: Register the service with AndroidManifest.xml ====
{{{
<service android:name="org.openmobster.app.DemoService">
        	<intent-filter>
        		<action android:name="org.openmobster.app.DemoService"/>
        	</intent-filter>
        </service>
}}}

==== Step 6: Start the Service from an Activity ====
{{{
//Start the Service
					Intent start = new Intent("org.openmobster.app.DemoService");
					MainActivity.this.startService(start);
}}}

==== Step 7: Stop the Service ====
{{{
Intent stop = new Intent("org.openmobster.app.DemoService");
					MainActivity.this.stopService(stop);
}}}

==== Full Service Code ====
{{{
/**
 * Copyright (c) {2003,2011} {openmobster@gmail.com} {individual contributors as indicated by the @authors tag}.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 */
package org.openmobster.app;

import android.app.Service;
import android.content.Intent;
import android.os.IBinder;
import android.widget.Toast;

/**
 * 
 * @author openmobster@gmail.com
 */
public class DemoService extends Service
{
	private boolean isRunning = true;
	
	@Override
	public IBinder onBind(Intent intent) 
	{
		//Not implemented...this sample is only for starting and stopping services.
		//Service binding will be covered in another tutorial
		return null;
	}
	
	
	@Override
	public void onCreate() 
	{
		super.onCreate();
	}


	@Override
	public int onStartCommand(Intent intent, int flags, int startId) 
	{
		super.onStartCommand(intent, flags, startId);
		
		//Announcement about starting
		Toast.makeText(this, "Starting the Demo Service", Toast.LENGTH_SHORT).show();
		
		//Start a Background thread
		isRunning = true;
		Thread backgroundThread = new Thread(new BackgroundThread());
		backgroundThread.start();
		
	    // We want this service to continue running until it is explicitly
	    // stopped, so return sticky.
	    return START_STICKY;
	}

	@Override
	public void onDestroy() 
	{
		super.onDestroy();
		
		//Stop the Background thread
		isRunning = false;
		
		//Announcement about stopping
		Toast.makeText(this, "Stopping the Demo Service", Toast.LENGTH_SHORT).show();
	}
	
	private class BackgroundThread implements Runnable
	{
		int counter = 0;
		public void run()
		{
			try
			{
				counter = 0;
				while(isRunning)
				{
					System.out.println(""+counter++);
					Thread.currentThread().sleep(5000);
				}
				
				System.out.println("Background Thread is finished.........");
			}
			catch(Exception e)
			{
				e.printStackTrace();
			}
		}
	}
}
}}}

----

==== Download this tutorial ====

  * [http://openmobster.googlecode.com/svn/samples/service.zip Download]

  * Run the Android Emulator

  * cd app-android
  {{{
      mvn -Papp-hot-deploy install
  }}}