#summary Push Email

*Related Links:* [DeveloperZone Developer Zone], [GetStarted Get Started]

=== Introduction ===

This tutorial will cover the architectural aspects of designing a *Push Email* App. It should cover design principles that can carry over to any enterprise mobile app.


=== Getting and Running this App ===

  * Step 1: [http://openmobster.googlecode.com/svn/samples/pushmail.zip Download] or svn co http://openmobster.googlecode.com/svn/samples/pushmail

  * Step 2: Build the Code: *mvn -DskipTests install*

  * Step 3: Install the App: (*cd app-android*), (*mvn -Phot-deploy install*)

  * Step 4: Run the Cloud Server: (*cd cloud*), (*mvn -PrunCloud integration-test*)


=== Architecting Cloud Components ===

Before architecting any Mobile App it is important to design the domain model of the system. In the case of a Push Email app, this model consists
of one entity which is *Email*.

Such is the case with any Enterprise App, but in the case of a mobile app
you must also take into account the model design based on integration with a *Sync Engine*. The *Sync Engine* will have serialization needs that must be met by the entities in your domain model.

The OpenMobster sync engine is *POJO-oriented*. As fields it allows all primitives, and String objects. It also allows other POJOs that meet this same specification.

Keeping that in mind, our [http://openmobster.googlecode.com/svn/samples/pushmail/cloud/src/main/java/org/openmobster/pushmail/cloud/channel/MailBean.java MailBean.java] is modeled using 5 String fields. Thing to notice here is that, the "Date" field was modeled as a formatted String instead of a _java.util.Date_ object. The serialization framework of the Sync engine will not support that.

Once the MobileBean is designed, next step is to architect the [http://openmobster.googlecode.com/svn/samples/pushmail/cloud/src/main/java/org/openmobster/pushmail/cloud/domain/MailProcessor.java MailProcessor.java]. This is a simple MailProcessor that connects with an IMAP-based Email server. This can be made as complex as you need, as long as it produces the Mobile Bean that integrates with the Sync engine.

Once the domain is in place, next step is to design the [http://openmobster.googlecode.com/svn/samples/pushmail/cloud/src/main/java/org/openmobster/pushmail/cloud/channel/MailChannel.java MailChannel.java] which exposes the Mobile Bean to the Sync Engine.


==== Channel Bootstrap ====

{{{
        public List<? extends MobileBean> bootup() 
	{	
		List<MailBean> inbox = this.mailProcessor.readInbox();
		
		//If total # of emails in the inbox are greater than the favorable active number
		int active = 100;
		if(inbox.size() > active)
		{
			List<MailBean> list = new ArrayList<MailBean>();
			for(int i=0; i<active; i++)
			{
				list.add(inbox.get(i));
			}
			
			return list;
		}
		
		//Bootstrap the Push State, such that only new emails are pushed
		String deviceId = SyncContext.getInstance().getDeviceId();
		this.initPushFilter(deviceId, inbox);
		
		return inbox;
	}
}}}
It exposes the first initial set of beans needed to get the App in a functional state. The rest of the beans are synchronized in the background without any user intervention.

==== CRUD Operation Support ====
{{{
        public List<? extends MobileBean> readAll() 
	{
		List<MailBean> inbox = this.mailProcessor.readInbox();
		
		//Bootstrap the Push State, such that only new emails are pushed
		String deviceId = SyncContext.getInstance().getDeviceId();
		this.initPushFilter(deviceId, inbox);
		
		//returns all the instances in the inbox
		return inbox;
	}
	
	public MobileBean read(String id) 
	{		
		List<MailBean> inbox = this.mailProcessor.readInbox();
		for(MailBean local:inbox)
		{
			if(local.getOid().equals(id))
			{
				return local;
			}
		}
		return null;
	}

        public void delete(MobileBean mobileBean) 
	{
		MailBean mailBean = (MailBean)mobileBean;
		
		//Deletes the email from the mail server
		this.mailProcessor.delete(mailBean);
	}

	public String create(MobileBean mobileBean) 
	{
		//Not Applicable
		return null;
	}
	
	public void update(MobileBean mobileBean) 
	{
		//Not Applicable
	}	
}}}
Support for the usual CRUD (Create, Read, Update, Delete) operations. The code is self-explanatory.

==== Push Support ====

The system periodically pings the Mobile Channel for any new beans that need to be synchronized. This is accomplished by invoking the following:
{{{
        public String[] scanForNew(Device device, Date lastScanTimestamp) 
	{
		PushFilter myFilter = this.pushFilters.get(device.getIdentifier());
		if(myFilter == null)
		{
			return null;
		}
		
		
		List<String> pushme = new ArrayList<String>();
		
		//Read the inbox
		List<MailBean> inbox = this.mailProcessor.readInbox();
		
		
		for(MailBean local:inbox)
		{
			String oid = local.getOid();
			if(!myFilter.isOnDevice(oid))
			{
				pushme.add(oid);
				myFilter.addToFilter(oid);
			}
			
			log.debug("*******Push Checking****************************");
			log.debug("OID: "+oid);
		}
		
		String[] returnMe = pushme.toArray(new String[]{});
		for(String push:returnMe)
		{
			log.info("*******Pushing****************************");
			log.info("OID: "+push);
		}
		
		return returnMe;
	}
}}}
The input device lets you find the data associated with the user, and the lastScan time lets you decide which of this data needs to be pushed to the device.

=== Architecting Device Components ===

On the device side, the components access the cloud data via the generic [http://openmobster.googlecode.com/svn/trunk/cloud/android/api/src/main/java/org/openmobster/core/mobileCloud/api/model/MobileBean.java MobileBean.java] component. This component provides access to the serialized version of the remote component.

==== Reading the Inbox ====
{{{
                //Reading all the 'Email' instances for display
		MobileBean[] mail = MobileBean.readAll(AppConstants.push_mail_channel);
		
		for(MobileBean local: mail)
		{
			//Showing the 'from' and 'subject' values on the list
			String from = local.getValue("from");
			String subject = local.getValue("subject");
			
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("empty", from);
			map.put("title", subject);
			mylist.add(map);
		}
		
		
		SimpleAdapter showcaseAdapter = new SimpleAdapter(activity, mylist, ViewHelper.findLayoutId(activity, "home_row"),
	     new String[] {"empty", "title"}, 
	     new int[] {ViewHelper.findViewId(activity, "empty"), ViewHelper.findViewId(activity, "title")});
	    view.setAdapter(showcaseAdapter);
}}}

==== Reading the details of a selected Email bean ====
{{{
               final MobileBean activeBean = this.mail[position];
				
				//Read the attributes from the MobileBean
				String from = activeBean.getValue("from");
				String date = activeBean.getValue("receivedOn");
				String subject = activeBean.getValue("subject");
				String message = activeBean.getValue("message");
				message = new String(Base64.decode(message.getBytes()));
				
				//Build the string to be displayed
				StringBuilder buffer = new StringBuilder();
				buffer.append("From: "+from+"\n\n");
				buffer.append("Received: "+date+"\n\n");
				buffer.append("Subject: "+subject+"\n\n\n");
				buffer.append(message);
				
				Activity currentActivity = (Activity)Registry.getActiveInstance().getContext();
				AlertDialog.Builder builder = new AlertDialog.Builder(currentActivity);
				builder.setMessage(buffer.toString())
				       .setCancelable(false).setTitle("Email")
				       .setNegativeButton("Delete", new DialogInterface.OnClickListener() 
				       {
				           public void onClick(DialogInterface dialog, int id) 
				           {
				        	   dialog.dismiss();
				        	   
				        	   //Delete this Email instance. This CRUD operation is then seamlessly
				        	   //synchronized back with the Cloud
				        	   activeBean.delete();
				        	   NavigationContext.getInstance().home();
				           }
				       })
				       .setNeutralButton("Close", new DialogInterface.OnClickListener() 
				       {
				           public void onClick(DialogInterface dialog, int id) 
				           {
				                dialog.dismiss();
				           }
				       });
				
				AlertDialog alert = builder.create();
				alert.show();
}}}

*Related Links:* [DeveloperZone Developer Zone], [GetStarted Get Started]