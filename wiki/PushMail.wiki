#summary Push Email

*Related Links:* [DeveloperZone Developer Zone], [GetStarted Get Started]

=== Introduction ===

This tutorial will cover the architectural aspects of designing a *Push Email* App. It should cover design principles that can carry over to any enterprise mobile app.


=== Getting and Running this App ===

  * Step 1: [http://openmobster.googlecode.com/svn/samples/pushmail.zip Download] or svn co http://openmobster.googlecode.com/svn/samples/pushmail

  * Step 2: Build the Code: *mvn -DskipTests install*

  * Step 3: Install the App: (*cd app-android*), (*mvn -Phot-deploy install*)

  * Step 4: Run the Cloud Server: (*cd cloud*), (*mvn -PrunCloud integration-test*)


=== Architecting Cloud Components ===

Before architecting any Mobile App it is important to design the domain model of the system. In the case of a Push Email app, this model consists
of one entity which is *Email*.

Such is the case with any Enterprise App, but in the case of a mobile app
you must also take into account the model design based on integration with a *Sync Engine*. The *Sync Engine* will have serialization needs that must be met by the entities in your domain model.

The OpenMobster sync engine is *POJO-oriented*. As fields it allows all primitives, and String objects. It also allows other POJOs that meet this same specification.

Keeping that in mind, our [http://openmobster.googlecode.com/svn/samples/pushmail/cloud/src/main/java/org/openmobster/pushmail/cloud/channel/MailBean.java MailBean.java] is modeled using 5 String fields. Thing to notice here is that, the "Date" field was modeled as a formatted String instead of a _java.util.Date_ object. The serialization framework of the Sync engine will not support that.

Once the MobileBean is designed, next step is to architect the [http://openmobster.googlecode.com/svn/samples/pushmail/cloud/src/main/java/org/openmobster/pushmail/cloud/domain/MailProcessor.java MailProcessor.java]. This is a simple MailProcessor that connects with an IMAP-based Email server. This can be made as complex as you need, as long as it produces the Mobile Bean that integrates with the Sync engine.

Once the domain is in place, next step is to design the [http://openmobster.googlecode.com/svn/samples/pushmail/cloud/src/main/java/org/openmobster/pushmail/cloud/channel/MailChannel.java MailChannel.java] which exposes the Mobile Bean to the Sync Engine.


==== Channel Bootstrap ====

{{{
        public List<? extends MobileBean> bootup() 
	{	
		List<MailBean> inbox = this.mailProcessor.readInbox();
		
		//If total # of emails in the inbox are greater than the favorable active number
		int active = 100;
		if(inbox.size() > active)
		{
			List<MailBean> list = new ArrayList<MailBean>();
			for(int i=0; i<active; i++)
			{
				list.add(inbox.get(i));
			}
			
			return list;
		}
		
		//Bootstrap the Push State, such that only new emails are pushed
		String deviceId = SyncContext.getInstance().getDeviceId();
		this.initPushFilter(deviceId, inbox);
		
		return inbox;
	}
}}}
It exposes the first initial set of beans needed to get the App in a functional state. The rest of the beans are synchronized in the background without any user intervention.


=== Architecting Device Components ===

*Related Links:* [DeveloperZone Developer Zone], [GetStarted Get Started]