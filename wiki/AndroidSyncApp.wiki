#summary Android Sync App: Beginner Level

= Introduction =

This is beginner level tutorial for writing an *Android Sync App*. Since this is a beginner level tutorial, it only covers *Boot Sync*. For a much more detailed example that covers all the four *CRUD* (Create, Read, Update, Delete) operations, see [MobilizeHibernate tutorial]. 


= Coverage =

This tutorial covers the following how-to's

  * Bootstrapping the Android App using *Boot Sync* on the sync channel in the Cloud.
  * Synchronizing new information in the Cloud via *Push* notification.
  * Writing a basic Sync Channel for the Cloud Server.

= Development Environment Setup =
  * [http://openmobster.googlecode.com/files/openmobster-android-2.0-snapshot.zip Latest] OpenMobster Cloud Platform

  * Java SE, JDK 6

  * Apache Maven 2.2.1

  * Android SDK

  * SVN client to checkout the source code

  * Any IDE for a little help. Not required. I use Eclipse

= Getting the Sample =

  * You can download the sample [http://openmobster.googlecode.com/svn/samples/offlineapp.zip]

  * Or you can check it out using: svn co http://openmobster.googlecode.com/svn/samples/offlineapp

  * Building the sample: *mvn install*. This will compile and setup the artifacts into your local maven repository. It will also automatically download all the *OpenMobster* binaries that are needed for this App.

= Running the Sample =

  * Install the Android Sync App on the device or emulator
    * *cd* app-android 
    * mvn -Phot-deploy install

  * Run the *OpenMobster* Cloud Server including the Sync Channel from this sample
    * *cd* cloud
    * mvn -PrunCloud integration-test

*Note*: Along with the Sync App, the CloudManager App called _DevCloud_ is installed on the device. This App provides the Cloud Service infrastructure on the device. In order for the App to be allowed to use the Cloud, the device must be first activated using the *Activate* function of the CloudManager App.

= Android Code =

The Android App synchronizes a Cloud Channel called *offlineapp_demochannel*, and operates in offline mode accessing the data from local storage. 

The App registers this channel with the on device Cloud Service inside the
[http://openmobster.googlecode.com/svn/samples/offlineapp/app-android/src/main/resources/moblet-app/moblet-app.xml moblet-app.xml] file as follows:

{{{
<channels>
 <channel>offlineapp_demochannel</channel>
</channels>
}}}

Once this channel is registered, that all the developer needs to do. The Cloud Service automatically takes care of managing the Sync lifecycle of this Channel.

When this App is launched, it waits on the Cloud Service to bootstrap this channel using *Boot Sync*. *Boot Sync* is a sync innovation where it synchronizes just enough data for the App to be functional, while the rest of the information is synchronized in the background. How much data should be included in a *Boot Sync* depends on each App's requirement.

[http://openmobster.googlecode.com/svn/samples/offlineapp/app-android/src/main/java/com/offlineApp/android/app/command/ChannelBootupHelper.java ChannelBootupHelper] serves as the Sync Bootstrapper for this App

{{{
/**
	 * Core execution happens on this invocation.
	 * 
	 * In this case, the 'offlineapp_demochannel' is bootstrapped
	 */
	public void doAction(CommandContext commandContext)
	{
		try
		{
			//Wait for 30 seconds for bootstrapping...This should not hold up the App for too long. 'Boot Sync' is an innovation where
			//the basic beans required for App function are synchronized. Other beans get synchronized later in the background, without any
			//user intervention
			int counter = 30;
			while(!MobileBean.isBooted("offlineapp_demochannel"))
			{
				Thread.currentThread().sleep(1000);
				if(--counter == 0)
				{
					throw new AppException();
				}
			}
		}
		catch(Exception e)
		{
			if(e instanceof AppException)
			{
				throw (AppException)e;
			}
			throw new RuntimeException(e);
		}
	}
}}}

Notice: It only waits for the bootstrapping via the MobileBean API component. It does not actually perform the *Boot Sync*. The *Boot Sync* is performed by the Cloud Service running inside the CloudManager App.

[http://openmobster.googlecode.com/svn/samples/offlineapp/app-android/src/main/java/com/offlineApp/android/app/command/DemoDetails.java DemoDetails] component is used to display
the details about a locally stored "Demo Bean" when selected from a list of beans on the Home screen. 

{{{
/**
	 * Finds the appropriate bean and sets it into the CommandContext for display
	 */
	public void doAction(CommandContext commandContext) 
	{
		try
		{
			//Find the selected bean from the HomeScreen
			String channel = "offlineapp_demochannel";
			String selectedBean = (String)commandContext.getAttribute("selectedBean");
			
			//System.out.println("---------------------------------------");
			//System.out.println("Bean: "+selectedBean);
			//System.out.println("---------------------------------------");
			
			String details = null;
			
			//Lookup by state..in this case, that of 'demoString' field of the bean
			GenericAttributeManager criteria = new GenericAttributeManager();
			criteria.setAttribute("demoString", selectedBean);
			MobileBean[] beans = MobileBean.queryByEqualsAll(channel, criteria);
			MobileBean unique = beans[0];
		
			//Sets up the String that will be displayed
			StringBuffer buffer = new StringBuffer();
			buffer.append("DemoString: "+unique.getValue("demoString"));
			details = buffer.toString();
			
			//Sets up the state of the CommandContext
			commandContext.setAttribute("details", details);
		}
		catch(Exception e)
		{
			//e.printStackTrace(System.out);
			throw new RuntimeException(e.toString());
		}
	}	
}}}

It uses the MobileBean API component to access the channel data. In this case, it issues a *queryByEqualsAll* method where the criteria is the value of the *demoString* field of the bean.

== Configuration ==

  * [http://openmobster.googlecode.com/svn/samples/offlineapp/app-android/src/main/resources/moblet-app/moblet-app.xml moblet-app.xml] : Contains the *OpenMobster* configuration
 
  * [http://openmobster.googlecode.com/svn/samples/offlineapp/app-android/AndroidManifest.xml AndroidManifest.xml]: Contains the *Android* configuration


= Sync Channel Code =