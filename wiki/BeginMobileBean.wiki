#summary MobileBean tutorial

*Related Links:* [BeginSyncChannel Sync Channel tutorial]

=== Introduction ===

A MobileBean is the App-side component used to access the data synchronized via a Sync Channel. This tutorial provides some useful code snippets to demonstrate the use of the MobileBean component.

=== Getting and Running this App ===

  * Step 1: [http://openmobster.googlecode.com/svn/samples/showcase.zip Download] or svn co http://openmobster.googlecode.com/svn/samples/showcase

  * Step 2: Build the Code: *mvn install*

  * Step 3: Install the App: (*cd app-android*), (*mvn -Phot-deploy install*)

  * Step 4: Run the Cloud Server: (*cd cloud*), (*mvn -PrunCloud integration-test*)


=== Display a list of MobileBeans ===
{{{
           //Read all the beans loaded via the channel
            MobileBean[] beans = MobileBean.readAll(AppConstants.webappsync);
		
		ArrayList<HashMap<String, String>> mylist = new ArrayList<HashMap<String, String>>();
		for(MobileBean local:beans)
		{
			HashMap<String, String> map = new HashMap<String, String>();
			map.put("empty", "");

                        //Display the 'title' property of each bean
			map.put("title", local.getValue("title"));
			mylist.add(map);
		}
}}}

This code snippet shows how to populate an Android ListView with the 'title' property of the beans.

=== Updating data via MobileBean ===
{{{
//Creates a new ticket instance on the device. Once 'saved', it will be seamlessly synchronized with the Cloud
		MobileBean activeBean = MobileBean.newInstance(AppConstants.webappsync);
		
                //populate the 'title' property from text field
		EditText title = (EditText)ViewHelper.findViewById(currentActivity, "title");
		activeBean.setValue("title", title.getText().toString());
		
                //populate the 'comment' property from text field
		EditText comments = (EditText)ViewHelper.findViewById(currentActivity, "comments");
		activeBean.setValue("comment", comments.getText().toString());
}}}

In this snippet, the MobileBean is updated when user supplies the data from the GUI. Once, everything is done, it is committed for synchronization. This is the commit phase.
{{{
        public void doAction(CommandContext commandContext) 
	{
		try
		{
			MobileBean bean = (MobileBean)commandContext.getAttribute("active-bean");
			bean.save();
		}
		catch(Exception e)
		{
			AppException appe = new AppException();
			appe.setMessage(e.getMessage());
			ErrorHandler.getInstance().handle(appe);
			
			throw appe;
		}
	}	
}}}

=== Delete Phase ===
{{{
        public void doAction(CommandContext commandContext) 
	{
		try
		{
			MobileBean ticketToDelete = (MobileBean)commandContext.getAttribute("active-bean");
			ticketToDelete.delete();
		}
		catch(Exception e)
		{
			AppException appe = new AppException();
			appe.setMessage(e.getMessage());
			ErrorHandler.getInstance().handle(appe);
			
			throw appe;
		}
	}	
}}}
This part is self-explanatory. When a user selects the bean to delete, this code commits it for synchronization with the Cloud.


The 'MobileBean' component shields the developer from any low-level sync details. The core platform does all the heavy lifting while the developer can focus on the CRUD aspect of the application.

*Related Links:* [BeginSyncChannel Sync Channel tutorial]